{"data":{"markdownRemark":{"html":"<p>안드로이드에서 굉장히 많이 쓰이는 AdapterView 입니다. 각각의 View에 다양한 레이아웃을 적용할 수 있어서 응용 또한 다양하게 할 수 있습니다. 이번 포스팅는 가장 기본적인 코드만 다뤄보겠습니다.</p>\n<p>ViewPager를 사용하려면 Android에서 제공하는 Support Library가 필요합니다. (최신 이클립스에 프로젝트를 생성하면 자동으로 추가되긴 합니다)\n혹시 포함되어있지 않았다면 [android-support-v4.jar] 파일은 SDK폴더에 extras 안에서 찾을 수 있습니다.</p>\n<ul>\n<li>이 예제는 프로젝트를 생성한 후 기본이 되는 activity 클래스와 xml레이아웃을 수정해 작업했습니다.</li>\n</ul>\n<p><strong>activity_main.xml</strong></p>\n<ul>\n<li>\n<p>support library에 있는 View를 사용할 때는 android.support.v4.view.ViewPager 로 패키지 이름을 전부 적어야 합니다.</p>\n<p><RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\" ></p>\n<pre><code>&#x3C;android.support.v4.view.ViewPager\n    android:id=\"@+id/pager\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    />\n</code></pre>\n</RelativeLayout>\n</li>\n</ul>\n<p><strong>MainActivity.java</strong></p>\n<ul>\n<li>\n<p>Activity 에서는 Inner Class로 Adapter 클래스를 만들고 ViewPager에 어댑터를 연결해줍니다.</p>\n</li>\n<li>\n<p>PagerAdapter의 종류도 몇가지가 있습니다. FragmentPagerAdapter, FragmentStatePagerAdapter, PagerAdapter</p>\n<p>public class MainActivity extends FragmentActivity {</p>\n<pre><code>private ViewPager mViewPager;\nprivate PagerAdapter mPagerAdapter;\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.activity_main);\n\n    mViewPager = (ViewPager) findViewById(R.id.pager);\n    mPagerAdapter = new PagerAdapter(getSupportFragmentManager());\n    mViewPager.setAdapter(mPagerAdapter);\n}\n\nprivate class PagerAdapter extends FragmentStatePagerAdapter {\n\n    public PagerAdapter(FragmentManager fm) {\n        super(fm);\n    }\n\n    @Override\n    public Fragment getItem(int position) {\n                    // 해당하는 page의 Fragment를 생성합니다.\n        return PageFragment.create(position);\n    }\n\n    @Override\n    public int getCount() {\n        return 5;  // 총 5개의 page를 보여줍니다.\n    }\n\n}\n</code></pre>\n<p>}</p>\n</li>\n<li>\n<p>각각의 PagerAdapter는 조금다른 특징을 가지고 있습니다. Fragment를 다루는게 일반적이기 때문에 FragmentPagerAdapter 의 큰 다른점 이라면\nFragmentPagerAdapter는 화면을 슬라이딩으로 전환할 때 한 번 생성된(화면에 보인) Fragment를 계속 메모리상 가지고 있습니다. 이전 Fragment로 슬라이딩을 해서 돌아간다고 하면 이전에 생성된 Fragment로 돌아가는 겁니다.\nFragmentStatePagerAdapter는 화면이 전환될 때 이전(화면에서 보이지 않는) Fragment는 메모리상 제거(destroy)가 됩니다. Adapter의 Fragment가 많거나 갯수를 알수없을 때 메모리관련 이슈를 위해 사용하는것이 좋다고 하네요</p>\n</li>\n</ul>\n<p><strong>PageFragment.java</strong></p>\n<pre><code>public class PageFragment extends Fragment {\n\n    private int mPageNumber;\n\n    public static PageFragment create(int pageNumber) {\n        PageFragment fragment = new PageFragment();\n        Bundle args = new Bundle();\n        args.putInt(\"page\", pageNumber);\n        fragment.setArguments(args);\n        return fragment;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mPageNumber = getArguments().getInt(\"page\");\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n        ViewGroup rootView = (ViewGroup) inflater.inflate(R.layout.fragment_page, container, false);\n        ((TextView) rootView.findViewById(R.id.number)).setText(mPageNumber + \"\");\n        return rootView;\n    }\n}\n</code></pre>\n<p>Fragment 클래스는 TextView 하나에 page 번호만 보여주는 화면을 생성합니다.</p>\n<p>위 코드를 적용한 화면입니다.</p>\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/pager_basic.gif\" alt=\"android-viewpager-example\"></p>","frontmatter":{"date":"2014-01-12T00:00:00","path":"/2014-01-12-android-view-pager-example","title":"Android ViewPager 기본예제"}}},"pageContext":{}}