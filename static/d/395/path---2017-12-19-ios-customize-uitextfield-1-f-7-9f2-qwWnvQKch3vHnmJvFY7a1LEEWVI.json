{"data":{"markdownRemark":{"html":"<h1>1. leftView, rightView 추가</h1>\n<p>₩₩₩\nlet paddingView = UIView(frame: CGRect(x: 0, y: 0, width: 4, height: textField.frame.height))\ntextField.leftView = paddingView\ntextField.leftViewMode = .always\ntextField.rightView = paddingView\ntextField.rightViewMode = .always\n₩₩₩</p>\n<p>장점: 이 방법은 UITextField 에서 제공하는 양옆에 뷰를 추가할 수 있는 영역에 empty뷰를 넣어서 여백을 주는 방법으로 간단하게 사용할수 있지만\n단점: 이것을 사용하면 편집중 생기는 클리어버튼(x버튼)이 사라질 수도 있다.</p>\n<h1>2. CAlayer 변경</h1>\n<p>textField.layer.sublayerTransform = CATransform3DMakeTranslation(5, 0, 0)</p>\n<p>Core Animation Layer 를 사용해서도 padding처럼(?) 효과를 줄 수 있다.</p>\n<p>장점: 한줄로 간단하게 효과를 줄 수 있지만\n단점: 원하지 않게 다른 뷰들도 영향이 간다. 예를 들어 leftVIew, rightView도 함께 위치가 변경되어있다</p>\n<h1>3. SubClass</h1>\n<p>class PadedTextField: UITextField {\n<br>\nvar insetX: CGFloat = 10\nvar insetY: CGFloat = 10\n<br>\noverride func textRect(forBounds bounds: CGRect) -> CGRect {\nreturn bounds.insetBy(dx: insetX, dy: insetY)\n}\n<br>\noverride func editingRect(forBounds bounds: CGRect) -> CGRect {\nreturn bounds.insetBy(dx: insetX, dy: insetY)\n}\n<br>\n}</p>\n<p>장점: 뷰의 top, bottom, left, right 모두 padding 을 주는것이 가능하다\n단점: Padding 을 주기 위해 Subclassing 을 해야한다.</p>","frontmatter":{"date":"2017-12-19 09:41:00","path":"/2017-12-19-ios-customize-uitextfield","title":"[iOS] UITextField Padding 설정"}}},"pageContext":{}}