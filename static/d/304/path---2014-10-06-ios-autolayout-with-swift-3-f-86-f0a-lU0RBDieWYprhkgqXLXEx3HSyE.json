{"data":{"markdownRemark":{"html":"<h1>코드로 Autolayout 적용하기 (Swift로 하는 autolayout) - 3</h1>\n<p>Swift로 <a href=\"%7B%7B%20site.url%20%7D%7D/ios-autolayout-with-swift-2\">Autolayout 적용하기 (코드로 하는 autolayout) - 2</a> 에서는 다른 뷰의 위치와 관련되서 배치하는 방법으로 적용해 보았다. 이번에는 뷰에 관계되어 정렬하는 방법을 사용해서 적용해본다.</p>\n<pre><code class=\"language-swift\">// 파란뷰 생성\nvar blueView: UIView = UIView()\nblueView.setTranslatesAutoresizingMaskIntoConstraints(false)\nblueView.backgroundColor = UIColor(red: 0.0, green: 0.0, blue: 1.0, alpha: 1.0)\n\nvar redView: UIView = UIView()\nredView.setTranslatesAutoresizingMaskIntoConstraints(false)\nredView.backgroundColor = UIColor(red:1.0, green:0.0, blue: 0.0, alpha: 1.0)\n\n// 뷰에 추가\nself.view.addSubview(blueView)\nself.view.addSubview(redView)\n\n// 뷰 딕셔너리 생성\nlet viewsDictionary = [\"blueView\":blueView, \"redView\":redView]\n\n// 파란뷰의 크기 설정\nlet blueConstaintV = NSLayoutConstraint.constraintsWithVisualFormat(\"V:[blueView(100)]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\nlet blueConstaintH = NSLayoutConstraint.constraintsWithVisualFormat(\"H:[blueView(100)]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\n\n// 빨간뷰의 크기 설정\nlet redConstaintV = NSLayoutConstraint.constraintsWithVisualFormat(\"V:[redView(200)]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\nlet redConstaintH = NSLayoutConstraint.constraintsWithVisualFormat(\"H:[redView(100)]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\n\n// 1. 뷰 정렬(가로)을 정의\nlet constraintPosH = NSLayoutConstraint.constraintsWithVisualFormat(\"H:|-30-[blueView]-10-[redView]\",\n    options: NSLayoutFormatOptions.AlignAllTop,\n    metrics: nil,\n    views: viewsDictionary)\n\n// 뷰 정렬(세로)을 정의\nlet constraintPosV = NSLayoutConstraint.constraintsWithVisualFormat(\"V:|-130-[blueView]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\n\nblueView.addConstraints(blueConstaintV)\nblueView.addConstraints(blueConstaintH)\n\nredView.addConstraints(redConstaintV)\nredView.addConstraints(redConstaintH)\n\nself.view.addConstraints(constraintPosV)\nself.view.addConstraints(constraintPosH)\n</code></pre>\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/ios-autolayout-with-swift-3.png\" alt=\"ios-autolayout-with-swift-3\"></p>\n<p><strong>1. options의 값에 top을 기준으로 나란히 정렬하기 위해 <code>NSLayoutFormatOptions.AlignAllTop</code>을 사용했다</strong></p>\n<ul>\n<li>포지션을 설정할 때 <code>options</code>는 특별한 기준을 두지 않는다면 <code>NSLayoutFormatOptions.allZeros</code>로 한다. <code>NSLayoutFormatOptions</code> 에는 왼쪽기준 오른쪽기준 중앙정렬 등 여러가지 옵션을 줄 수 있다.</li>\n<li><code>H:|-30-[blueView]-10-[redView]</code> 은 Horizontal을 기준으로 super view의 왼쪽에서 여백 30 + blueView + 여백 10 + redView 를 배치한 것이다.</li>\n<li><code>V:|-30-[blueView]-20-[redView]</code> 은 Vertical을 기준으로 super view의 위에서 여백 30 + blueView + 여백 20 + redView 를 배치했다.</li>\n</ul>","frontmatter":{"date":"2014-10-06 00:00:00","path":"/2014-10-06-ios-autolayout-with-swift-3","title":"[iOS] 코드로 Autolayout 적용하기 (Swift로 하는 autolayout) - 3"}}},"pageContext":{}}