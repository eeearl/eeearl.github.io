{"data":{"markdownRemark":{"html":"<h1>코드로 Autolayout 적용하기 (Swift로 하는 autolayout) - 2</h1>\n<p>Swift로 <a href=\"%7B%7B%20site.url%20%7D%7D/ios-autolayout-with-swift-1\">Autolayout 적용하기 (코드로 하는 autolayout) - 1</a> 에서는 간단한 뷰 배치에 대해서 해보았다. 이번엔 두개 이상의 뷰에 관계를 엮어 적용해본다.</p>\n<pre><code class=\"language-swift\">// 파란뷰 생성\nvar blueView: UIView = UIView()\nblueView.setTranslatesAutoresizingMaskIntoConstraints(false)\nblueView.backgroundColor = UIColor(red: 0.0, green: 0.0, blue: 1.0, alpha: 1.0)\n\n// 빨간뷰 생성\nvar redView: UIView = UIView()\nredView.setTranslatesAutoresizingMaskIntoConstraints(false)\nredView.backgroundColor = UIColor(red: 1.0, green: 0.01, blue: 0.07, alpha: 1.0)\n\n// 1. 뷰에 추가\nself.view.addSubview(blueView)\nself.view.addSubview(redView)\n\n// 2. 뷰 딕셔너리 생성\nlet viewsDictionary = [\"blueView\":blueView, \"redView\":redView]\n\n// 파란뷰의 크기 설정\nlet blueConstaintV = NSLayoutConstraint.constraintsWithVisualFormat(\"V:[blueView(100)]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\nlet blueConstaintH = NSLayoutConstraint.constraintsWithVisualFormat(\"H:[blueView(100)]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\n\n// 빨간뷰의 크기 설정\nlet redConstaintV = NSLayoutConstraint.constraintsWithVisualFormat(\"V:[redView(200)]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\nlet redConstaintH = NSLayoutConstraint.constraintsWithVisualFormat(\"H:[redView(100)]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\n\n// 3. 뷰 정렬(가로)을 정의\nlet constraintPosH = NSLayoutConstraint.constraintsWithVisualFormat(\"H:|-30-[blueView]-10-[redView]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\n// 뷰 정렬(세로)을 정의\nlet constraintPosV = NSLayoutConstraint.constraintsWithVisualFormat(\"V:|-130-[blueView]-20-[redView]\",\n    options: NSLayoutFormatOptions.allZeros,\n    metrics: nil,\n    views: viewsDictionary)\n\nblueView.addConstraints(blueConstaintV)\nblueView.addConstraints(blueConstaintH)\nredView.addConstraints(redConstaintV)\nredView.addConstraints(redConstaintH)\n\nself.view.addConstraints(constraintPosV)\nself.view.addConstraints(constraintPosH)\n</code></pre>\n<p>가로세로 100x100의 파란색 뷰와 가로세로 30x30의 붉은색 뷰를 배치하고 Vertical과 Horizontal 의 여백과 간격을 주었다.</p>\n<p><img src=\"%7B%7B%20site.url%20%7D%7D/assets/ios-autolayout-with-swift-2.png\" alt=\"ios-autolayout-with-swift-2\"></p>\n<p><strong>1.두개의 뷰의 <code>addSubView</code>를 할때 레이어가 밑에서 부터 위로 쌓이는 순서가 된다.</strong></p>\n<p><strong>2. 뷰 딕셔너리를 생성하는데 용도는 아래에 있는 Visual Format에서 쓰일 값(뷰오브젝트 또는 수치)를 키값으로 쓰이기 위해 정의한다.</strong></p>\n<p><strong>3. 뷰의 정렬하는 규칙을 정의한다. 가로를 정의할 땐 'H', 세로를 정의할 땐 'V'로 시작한다. 가로 100, 세로 200의 길이를 정의한다면 가로는 <code>H:[view(100)]</code>, 세로는 <code>V:[view(200)]</code> '|'는 뷰의 끝을 의미한다. 예를 들어 <code>H:|-30-[view]</code> 는 왼쪽 끝에서 30 의 여백을 두고 view를 위치하겠다는 의미이다. 여기선 왼쪽 끝을 기준으로 여백을 주었고 두개의 뷰 사이에 간격을 주었다.</strong></p>\n<ul>\n<li>포지션을 설정할 때 <code>options</code>는 특별한 기준을 두지 않는다면 <code>NSLayoutFormatOptions.allZeros</code>로 한다. <code>NSLayoutFormatOptions</code> 에는 왼쪽기준 오른쪽기준 중앙정렬 등 여러가지 옵션을 줄 수 있다.</li>\n<li><code>H:|-30-[blueView]-10-[redView]</code> 은 Horizontal을 기준으로 super view의 왼쪽에서 여백 30 + blueView + 여백 10 + redView 를 배치한 것이다.</li>\n<li><code>V:|-30-[blueView]-20-[redView]</code> 은 Vertical을 기준으로 super view의 위에서 여백 30 + blueView + 여백 20 + redView 를 배치했다.</li>\n</ul>","frontmatter":{"date":"2014-09-24T00:00:00","path":"/2014-09-24-ios-autolayout-with-swift-2","title":"[iOS] 코드로 Autolayout 적용하기 (Swift로 하는 autolayout) - 2"}}},"pageContext":{}}