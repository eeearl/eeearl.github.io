{"data":{"markdownRemark":{"html":"<blockquote>\n< 프론트엔드 개발자를 위한 자바스크립트>(2013 인사이트, 한선용 옮김) 의 책을 요약한 내용으로 자바스크립트 제대로 배우기 스터디 그룹(페이스북) 의 글입니다.\n</blockquote>\n<h2>1. 문법</h2>\n<ul>\n<li>\n<p>ECMAScript 문법은 C와 비슷한 언어에서 차용했기 때문에 비슷한 문법이 많음<br>\n* 대소문자를 구분함 (test와 Test는 다른 변수임)<br>\n* 식별자는 관습적으로 카멜표기법을 씀 (*첫 번째 문자는 반드시 'a-Z', '_', '$' 중 하나여야 한다.)</p>\n<ul>\n<li>\n<p>주석은 C언어 스타일의 주석으로 표기한다. (// 또는 /*)</p>\n</li>\n<li>\n<p>스트릭트 모드</p>\n<ul>\n<li>기존과 다른 방식으로 자바스크립트를 파싱하고 실행하라는 명령</li>\n<li>모드를 적용하려면 <code>\"use strict\"</code>을 넣으면 된다.</li>\n</ul>\n</li>\n<li>\n<p>문장 끝에는 항상 세미콜론을 붙인다. (없어도 상관없지만 비추천)</p>\n</li>\n<li>\n<p>제어문은 항상 블록을 사용한다. (한줄 코드는 없어도 상관없지만 </p>\n</li>\n<li>\n<p>변수</p>\n<ul>\n<li>모든 변수는 'var 변수이름' var 연산자를 사용</li>\n<li>변수에는 어떠한 타입이든 넣을 수 있다.</li>\n<li>저장된 타입에 다른 타입을 바꿔서 넣는것도 가능하지만 비추천</li>\n</ul>\n</li>\n<li>\n<p>데이터 타입</p>\n<ul>\n<li>typeof 연산자 : 데이터 타입을 알려줌</li>\n<li>undefined 타입 : 초기화 하지 않은 변수에 할당되는 값</li>\n<li>Null 타입 : 빈 객체를 가리키는 포인터 값</li>\n<li>불리언 타입 : true 또는 false 두가지 값만 가지는 타입</li>\n<li>숫자 타입 : 숫자 리터럴을 통해서 여러가지 숫자 타입을 나타냄. 기본 리터럴형식은 10진법</li>\n<li>문자열 타입 : 큰따옴표나 작은따옴표로 감싸서 표현함.</li>\n<li>객체 타입 : new 연산자를 사용해서 객체를 생성함</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p> {% highlight javascript %}\nNaN (Not a Number) 값\n숫자를 반환할 것으로 실행한 조작이 실패할 경우 반환하는 값으로 에러가 아니다.\nNaN값의 구분은 NaN == NaN 으로도 불가능하며 isNaN()함수로 판별할 수 있다.\n{% endhighlight %}</p>\n<h2>2. 연산자</h2>\n<ul>\n<li>자바스크립트의 연산자는 다른 언어에서 쓰임과 같기 때문에 생략합니다. </li>\n</ul>\n<h2>3. 문장 (제어문)</h2>\n<ul>\n<li>제어문도 C언어의 형식을 그대로 사용하고 있어서 생략합니다.</li>\n</ul>\n<h2>4. 함수</h2>\n<ul>\n<li>기본 문법\n{% highlight javascript %}\nfunction functionName(arg0, arg1, ... argN) {\nstatements\n}\n{% endhighlight %}\n</li>\n<li>매개변수를 지정하지 않아도 매개변수를 넣어서 arguments[n] 으로 접근 가능.</li>\n<li>return을 할땐 모두 값으로 넘김, 매개변수를 참조하는 형식으로 전달하지 못한다.</li>\n<li>오버로딩이 없다. 같은 이름의 함수를 선언하면 마지막에 선언한 함수를 사용하게 됨.</li>\n</ul>","frontmatter":{"date":"2014.Apr.03","path":"/2014-04-03-javascript-study-3","title":"[Javascript 책 요약] 3장 언어의 기초"}}},"pageContext":{}}