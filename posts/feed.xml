<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog.eeearl.com</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 19 Nov 2017 20:27:08 +0900</pubDate>
    <lastBuildDate>Sun, 19 Nov 2017 20:27:08 +0900</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>[RxSwift] RxSwift 를 프로젝트에 사용하게 된지 2주가 되었다.</title>
        <description>&lt;p&gt;Rx 를 공부한지는 2달정도 전 부터 였던것 같다. 현재 하고 있는 iOS 프로젝트를 위해 공부한다는 생각을 하고 RxSwift 로 자료를 찾아봤다.&lt;/p&gt;

&lt;p&gt;처음엔 &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/&quot;&gt;공식 Github Repository&lt;/a&gt; 에 가서 설치를 하고 따라해보았다.&lt;/p&gt;

&lt;p&gt;생각보다 어렵진 않았던것 같은데 이걸 어떻게 모든곳에 적용해야 하는지 잘 감이 오지 않았다. 그렇게 이해 해보려고 노력을 하다가 첫커브를 오르기가 쉽지 않아 잠깐 쉬어버렸다. 그리고 나중에 다시 보니 조금 더 이해가 되는 느낌이었다. 그렇게 몇번을 반복했다. 많은 토이프로젝트를 만들어서 생각해본대로 이렇게 저렇게 만들어 보기를 해보니 UI는 이미 다 구현이 되어있어서 Rx로 구현하는게 어렵지 않아졌다.&lt;/p&gt;

&lt;p&gt;여기까지 오는데 한달이 조금넘게 걸린것 같다. 알듯 말듯 한 이해들이 나를 더 복잡하게 만들기도 했는데 그럴때 마다 다른 사람들이 만들어 놓은 RxSwift 프로젝트들을 보고 정리를 했다. (Github 에서 RxSwift 로 작성한 프로젝트를 오픈한 레포들이 많다.)&lt;/p&gt;

&lt;p&gt;Observer 의 구현체들이 몇개 있는데 무엇이 다른지 이해하려면 Hot, Cold 라는 개념을 정리하면, 사용하기 조금 쉬워지는데 상황에 맞게 적절히 사용하기 위해 꼭 알아야 하는 개념이다.&lt;/p&gt;

&lt;p&gt;이미 UI에 대한 구현은 다 되어있어서 프로젝트에 적용하기 시작했다. 가장 단순한 화면부터 Rx로 바꾸었다.
View가 Observer 이고 Subscript 를 바인딩하는게 처음엔 어색했지만 나중엔 이해도되고 코딩 속도도붙어서 전부는 아니지만 대부분 Rx 로 바꿨다.&lt;/p&gt;

&lt;p&gt;조금 복잡한 구현이 되어있는곳은 많은 곳을 손대야 해서 손대기 어려웠지만 많이 복잡하지 않은 곳은 Operator를 적용해 가며 데이터를 가공하고 처리하기 시작했다. Rx의 높은 러닝커브의 이유중 하나가 수많은 Operator 들인데 비슷한 이름들이 많고 단순히 데이터를 처리하는 것이 아니라 Memory safty 를 위해 어떠한 처리를 해주는 것까지 알아야 하는게 좀 난관이다. 처음엔 그림으로 설명을 많이 해주는것이 이해가 잘 되지 않았었는데 Operator 특징을 알아가면서 이해가 되었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;RxSwift 에 대해 아직 공부해야 할 것들이 많이 남아있지만 쉬운것부터 프로젝트에 적용하면서 익히는것이 좋을 것 같다는 생각이 들어서 시작하게 되었다. 프로젝트는 혼자 하고 있는 것이라 쉽게 적용해볼 수 있었다. Rx 브랜치를 새로 만들어서 그곳에서만 따로 Rx 로 구현된 코드를 관리했다.&lt;/p&gt;

&lt;p&gt;UI 에 코드를 작성하면서 반복작업을 하다보니 &lt;a href=&quot;https://github.com/ul7290/RxSwiftSnippets&quot;&gt;Snippet&lt;/a&gt; 을 작성하였다. UI에 관련된 작은 코드들 이지만 생각보다 rx 코딩하는게 짧진 않아서 항상 헷갈리는 코드를 빠르게 작성 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ul7290/RxSwiftSnippets&quot;&gt;RxSwiftSnippets Github Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Links&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LeoMobileDeveloper/awesome-rxswift&quot;&gt;https://github.com/LeoMobileDeveloper/awesome-rxswift&lt;/a&gt; 
&lt;a href=&quot;https://github.com/DroidsOnRoids/RxSwiftExamples&quot;&gt;https://github.com/DroidsOnRoids/RxSwiftExamples&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Jul 2017 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2017-07-01-rxswift-basic/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-07-01-rxswift-basic/</guid>
        
        <category>xcode,</category>
        
        <category>rxswift</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Carthage 에서 Cocoapods 으로 모든 프레임웍을 이동했다.</title>
        <description>&lt;p&gt;프로젝트를 진행하면 유용하고 좋은 서드파티 프레임웍이나 커뮤티니 형성이 잘된 오픈소스 그룹에서 (&lt;del&gt;능력자들이&lt;/del&gt;) 만든 좋은 오픈소스 를 써서 개발속도를 높이거나 그리고 좋은 프레임웍은 코드품질도 높힐 수 있기 때문에 iOS 프로젝트를 들어가게 되면 필수적으로 Carthage 나 Cocoapods 를 사용해서 Dependency 프레임웍을 관리한다.&lt;/p&gt;

&lt;p&gt;최근에 진행하고 있는 프로젝트에선 처음에 Carthage 를 사용했었는데 그 이유는,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Workspace 를 사용할 필요가 없다. (Cocoapods의 경우 알아서 Workspace 를 만들어 준다.)&lt;/li&gt;
  &lt;li&gt;패키지 파일의 작성이 좀더 간단명료하다.&lt;/li&gt;
  &lt;li&gt;바이너리 프레임웍으로 미리 빌드를 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Carthage 를 사용하면서 드는 점은 개발중인 프로젝트와 확실히 프레임웍들이 독립적인 형태를 만들어 주는 느낌이 든다. (Carthage 팀이 이런 의도로 이 프로젝트를 시작했다고 한다.)&lt;/p&gt;

&lt;p&gt;그리고 프로젝트를 진행하면서 구글과 페이스북의 SDK 들을 설치해서 사용을 해야했는데 직접 다운로드를 받아 사용하는 방법과 Cocoapods를 통한 방법만 제공하고 Carthage 는 정식지원을 해주지 않는다. 그래서 중간엔 Carthage와 Cocoapods를 둘다 사용을 했었다. (결국 Workspace를 만들게 됐다는…)&lt;/p&gt;

&lt;p&gt;이렇게 두가지를 모두 사용하면서 느낀점은 프로젝트가 굉장히 커지는 느낌이 들고 실제로 용량도 상당해졌다. Carthage 는 flag 를 줘서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; 용만 따로 빌드할수 있지만 framework 파일 자체의 용량이 상당히 컸다. 그리고 캐쉬 파일들도 많이 생겨서 지저분해 보였다. 가끔 직접 추가해야 하는 프레임웍도 일일히 관리하는게 상당히 불편했다.&lt;/p&gt;

&lt;p&gt;결국 Cocoapods 로 전부 옮겨와서 관리하고 있다. 둘다 분명한 장단점이 있지만 마지막에 수동으로 추가삭제를 해야하는게 갯수가 많아지니 가끔 충돌이 나서 정리해야하는 번거로움이 있었다. 특히 구글은 기능하나만 쓰고싶었는데 한가지 기능을 위해 4-5가지를 설치해야 하는 것때문에 상당히 애를썼었다.&lt;/p&gt;

&lt;p&gt;개인적으로 많은 프레임웍을 쓰지 않는다면 Carthage 를 쓰는것이 깔끔하고, 구글이나 페이스북의 프레임웍을 쓰게되면 Cocoapods 을 쓰는게 관리에 좀더 나을것 같다.&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage Github&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://cocoapods.org/&quot;&gt;Cocoapods Website&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Jun 2017 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2017-06-28-carthage-and-cocoapods/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-06-28-carthage-and-cocoapods/</guid>
        
        <category>xcode,</category>
        
        <category>carthage,</category>
        
        <category>cocoapods</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Digital Ocean에 Cloud Flare로 https 쉽게 설정하기</title>
        <description>&lt;p&gt;최근 프로젝트에서 간단한 서버사이드와 통신을 하는 부분이 있었는데 애플쪽에서 통신관련된 부분에서 스펙을 https로 요구하고 있어서 고민하고 있던도중 @haruair 님의 조언으로 가장 간단한 방법은 &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloud Flare&lt;/a&gt;로 연결해주는 방법이라고 알려주셔서 적용해보았다.&lt;/p&gt;

&lt;p&gt;엄청 간단하게 다른 추가작업이 필요없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;를 적용할수 있고 단지 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;만 필요한 것이라면 무료로 이용이 가능하다.&lt;/p&gt;

&lt;p&gt;내가 작업했던 환경은&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정도였다.&lt;/p&gt;

&lt;p&gt;절차를 간략하게 설명하면&lt;/p&gt;

&lt;h4 id=&quot;cloud-flare-에서&quot;&gt;&lt;em&gt;Cloud Flare 에서&lt;/em&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloud Flare&lt;/a&gt;에 가입하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;를 적용할 도메인을 입력 하면&lt;/li&gt;
  &lt;li&gt;알아서 도메인의 네임서버를 분석해서 어떤 값으로 교체하라는 화면이 친절하게 나온다.&lt;/li&gt;
  &lt;li&gt;도메인을 사용하는 서비스로 가서 네임서버를 바꿔준다.&lt;/li&gt;
  &lt;li&gt;메뉴에 DNS를 들어가 &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS Records&lt;/code&gt; 에서 아래와 같이 입력해준다. {} 안은 해당하는 값으로 넣어준다.
    &lt;ul&gt;
      &lt;li&gt;A    {#DOMAIN_NAME#}    {#SERVER_IP_ADDRESS#}&lt;/li&gt;
      &lt;li&gt;CNAME www    {#DOMAIN_NAME#}&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메뉴에  Crypto를 들어가 SSL을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Flexible&lt;/code&gt; 로 바꿔준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;server-에서&quot;&gt;&lt;em&gt;Server 에서&lt;/em&gt;&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Node.js 서버를 80포트로 서비스해준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 약 1~2시간 정도 기다려주면 https로 접속해볼수 있다.&lt;/p&gt;

&lt;p&gt;일반적인 https를 적용하는 것이라면 SSL인증서를 받아서 서버안에서 많은 작업들을 해줘야 하는데 
Cloud Flare는 이 절차들을 엄청나게 간소화 시켜주었다. 네임서버만 변경해서 도메인과 서버의 중간에서 Cloud Flare의 SSL을 통해 https의 혜택을 받는것이다.&lt;/p&gt;

&lt;p&gt;이제 다른사람이 간단히 https를 이용할 것을 찾는다면 Cloud Flare를 추천한다.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Apr 2017 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2017-04-04-https-cloudflare/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-04-04-https-cloudflare/</guid>
        
        <category>https,</category>
        
        <category>digitalocean</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>2016년 회고록</title>
        <description>&lt;h1 id=&quot;2016년-회고록&quot;&gt;2016년 회고록&lt;/h1&gt;

&lt;p&gt;벌써 2016년 한해를 호주에서 보냈다. 
2015년 12월 31일, 작년 그때를 생각해보면 한마디씩 친구들 앞에서 말 한마디도 영어로 말을 못했었는데 지금은 친구들이 나에게 예전보다 영어를 더 편하게 듣고 말한다는 이야기를 들을 때마다 올해는 어떤 한 해를 보냈었는지 많은 생각이 든다.
현재는 호주인 회사에서 일을 하고 있다. 기대했던 것보단 부족한 게 많았지만, 지난 일들을 회상하며 더 나은 2017년을 위해 회고록을 작성해본다.&lt;/p&gt;

&lt;h2 id=&quot;워킹홀리데이&quot;&gt;워킹홀리데이&lt;/h2&gt;

&lt;p&gt;2016년 9월에 워킹홀리데이 비자가 만료되었는데 되돌아보면 많은 도전이 있었고 1년밖에 안 되는 시간이지만 많은 것을 느꼈고 배웠다고 생각한다.&lt;/p&gt;

&lt;p&gt;처음엔 개발회사나 개발에 관련된 업무를 할 것이라고 기대했던 것과는 다르게 3개월 정도를 개발회사에 지원과 인터뷰로 시간을 지냈다. 나머지는 계속해서 영어만 공부했는데 그때 조금 더 기준과 기대를 낮췄더라면 어땠겠냐는 생각을 해본다. 그래도 그동안에 경험이 있었기에 연단되어 지금까지 버틸 수 있었다고 생각한다. 다른 나라에서 외국인으로 살아간다는 것은 쉬운 일이 아니며 특히, 다른 문화 속에 그들처럼 혹은 그들과 함께 살려면 어떻게 해야 하는지 피부로 느꼈다.&lt;/p&gt;

&lt;p&gt;아무 일도 하지 않고 있다가 생활고가 어려워져서 시작했던 일은 데모도 부터 매장청소, 카페주방 그리고 중간에 웹사이트를 만드는 일과 게임을 만드는 일을 했었다. 데모도는 노동 쪽으로 소질이 있지 않으면 정말 어려운 일이었다. 거의 10년 동안 군대 전역 이후로 이런 일을 안 했는데 첫날 일을 하고 힘들지 않을 수 없었다. 짧은 기간 동안 일을 하고 그만두었지만 내가 하고 싶지 않던 하고 싶던 여기서 무엇을 해야 하는 알게 되었다. 의류매장에서 청소를 할 때도 카페에서 일할 때도 외국에서 살아가려면 어떤 것들을 할 줄 알아야 하는지 알게 되었고 일하는 동안 사람들을 만나면서 내가 IT쪽으로 일을 했다는 이야기를 주변 사람들이 알게 되면서 나에게 여러 정보도 주고, 사람들을 소개해주기도 하면서 웹사이트나 게임같은 돈을 받고 해보지 못했던 일도 해보았다.&lt;/p&gt;

&lt;p&gt;그리고 외국에선 봉사활동도 좋은 경험으로 인정해준다는 것을 예전부터 알고 있었는데 우연한 기회로 교회를 통해서 주말마다 홈리스들을 위해 모바일 샤워버스를 제공하고 음식을 같이 먹고 이야기를 하는 일도 꽤 오랫동안 하게되었다. 홈리스들을 대하는것이 처음엔 어려웠지만 하면서 익숙해지고 꾸준하게 열심히 일한 모습에 교회에서 레퍼런스도 받을 수 있었다.&lt;/p&gt;

&lt;p&gt;워킹홀리데이를 통해서 호주에 적응을 잘 할 수 있었다고 생각한다. 서양문화를 배울 수 있는 기회였고 다른 어떤 나라에 가도 잘 지낼 수 있다는 자신감도 생겼다. 내가 영어를 원래 잘하고 적응력이 좋았던 것이 아니라 도전을 하면서 기회들을 접할 수 있게 되었고 그렇게 생활하며 지금 여기까지 왔다고 생각한다. 아쉬운 게 많은 시간이었지만 후회는 하지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;회사&quot;&gt;회사&lt;/h2&gt;

&lt;p&gt;워킹홀리데이의 마지막 즈음에 연락이 온 회사, 사실 인터뷰는 굉장히 예전에 봤었는데 잊고 있을 때 즈음 연락이 다시 왔다. 아직도 우리 아이템에 관심이 있냐고, 다시 인터뷰를 보는 줄 알았는데 자기들이 가지고 있는 아이디어를 굉장히 자세히 기술한 문서를 보여주었다. 내가 그 프로젝트를 하겠다고 결심하고 나서도 이후에 몇 번의 확인을 하는 미팅을 했었다.&lt;/p&gt;

&lt;p&gt;영어도 이 정도면 나쁘지 않다고 했고 실력을 조금 의심하는 눈치였지만 1달 정도 빠르게 프로토타입을 만들어 윤곽을 잡아서 보여주니 다행히 만족하는 것 같다. 큰 회사는 아니지만, 호주인과 같이 일하고 있고 일하면서 느끼는 건 한국과는 확실히 대우가 다르다. 일이 먼저가 아니라 사람이 먼저라는 느낌이다. 예를 들어 내가 일정을 무리하게 잡으면 건강을 먼저 챙기라는 말부터 해주고, 야근하려고 하면 좀 쉬고 하라면서 집에 보내준다. 아직 4개월밖에 일하지 못했지만, 앞으로 일하는 게 기대된다.&lt;/p&gt;

&lt;h2 id=&quot;프로그래밍-스터디&quot;&gt;프로그래밍 스터디&lt;/h2&gt;

&lt;p&gt;꾸준히 한국에서 리모트로 스터디를 진행했었고 스터디 &lt;a href=&quot;https://itunes.apple.com/app/id1123429371&quot;&gt;결과물&lt;/a&gt;도 나왔었다. 스위프트 스터디를 초창기 1.0이 발표되었을 때부터 3 까지 꾸준히 진행해왔다. 이젠 다른 언어보다 스위프트가 더 익숙한듯하다. 그리고 시간이 나면 틈틈이 오픈소스에 기여해보려고 노력했었다. 데일리코딩까진 아니지만 뭔가 배운 것을 매일 Github에 커밋하는 것도 해봤지만 내 체질은 아닌듯하다. 1달 정도 하고 중단되었다. 짧은 코드를 풀 리퀘스트 하는 시도는 몇 번 해봤었다. 영어가 조금씩 늘어가니까 영어로 작성하는 것도 조금씩 편해지고 더욱 도전하기 어렵지 않았었다.&lt;/p&gt;

&lt;p&gt;내년엔 조금 더 오픈소스에 이바지를 해보려 한다. 커밋메세지나 이슈등록들도 읽어보고 어떤 식으로 단어를 사용하는지 문법들 같은 것을 인식해가며 읽어보는 것도 프로그래밍에 관련해서 뿐만 아니라 영어에 상당한 도움이 된다는 것을 느꼈다.&lt;/p&gt;

&lt;h2 id=&quot;영어&quot;&gt;영어&lt;/h2&gt;

&lt;p&gt;호주생활에서 영어는 필수이다. 영어를 안 하게 될 수 없는 상황들이 많으므로 조금씩 늘 수밖에 없다. 물론, 노력은 해야 한다. 계속 사람들을 만나거나 밖에서 활동을 많이 해야 하는데 나는 야외활동을 잘하는 타입이 아니어서 일부러 많이 친구들을 만났다. 같은 집에 살던 영국 친구들과도 이야기를 하고 영어도 물어보고 그들의 표현을 따라 하기도 하면서 연습을 했었다. 제일 어려웠던 건 일상대화인데 익숙하지 않은 분야나 다른 문화를 가지고 있는 사람들과 일상대화를 한다는 게 굉장히 어려웠다. 여기는 축구(푸티), 크로켓, 테니스, F1, 이런 경기들이 굉장히 인기가 높은데 한국에서 이런 것은 비인기 종목이라 접해보지 못했기 때문에, 일부러 경기에 가서 보기도 하고 위키를 찾아보며 룰을 공부했었다.&lt;/p&gt;

&lt;p&gt;나중에 학원도 다닌 적이 있는데 어느 정도 영어가 좀 익숙해진다는 느낌이 들었을 때 학원을 가니까 또 한 번 느는 느낌이 들고. 이런 식으로 조금씩 조금씩 느는 것 같다. 이젠 좀 더 장문의 영어 글을 많이 읽는 습관들을 길러야겠다. 책도 읽고 뉴스도 많이 읽는 습관이 영어 실력에 엄청나게 도움이 된다.&lt;/p&gt;

&lt;h2 id=&quot;기대되는-2017년&quot;&gt;기대되는 2017년&lt;/h2&gt;

&lt;p&gt;2016년은 부족한 것도 많고 아쉬운 것도 많았지만 호주생활에 이제 겨우 한 걸음 나아갔다고 생각된다. 아직 계약직이긴 하지만 회사도 다니고 있고 시티에 살던 집도 조금 외곽으로 옮겨갔고 좀 더 좋은 환경에서 살고 싶다는 목표를 조금씩 실천하고 있다. 내년은 운동도 조금 더 관심을 두고 건강과 생활에 좀더 신경쓰기를 목표로 하고싶다. 디자인패턴 공부와 사진찍기도 그리고 글쓰기를 꾸준히 해갈 계획이다.&lt;/p&gt;

&lt;p&gt;항상 주변에서 신경 써주시며 견딜 수 있게 조언과 힘을 주신 분들이 있어 올해를 잘 끝낼 수 있었다고 생각한다. 좀 더 기대되는 2017년을 준비하며 2016년을 마친다.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2016-12-28-adios-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-12-28-adios-2016/</guid>
        
        
        <category>LifeStory</category>
        
      </item>
    
      <item>
        <title>카카두 첫 릴리즈 후기</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/app/id1123429371&quot;&gt;카카두(KAKADU)&lt;/a&gt; 앱이 앱스토어에 정식등록이 되었다. 처음부터 프로젝트로 진행한건 아니고 스터디로 시작된 프로젝트였다 스터디를 시작한건 2016년 5월 즈음이었는데, &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt;를 다시 공부해보려고 시작한 Xcode 프로젝트가 앱스토어에 출시까지 되어버렸다. 진행하면서 느끼고 배운것들을 공유하고 싶어서 글로 적어본다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 스터디&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;처음엔 그냥 iOS TDD 스터디였다. 최신의 스위프트를 사용하고 (그때 당시엔 Swift2를 사용했다.) &lt;a href=&quot;https://www.packtpub.com/application-development/test-driven-ios-development-swift&quot;&gt;Test-Driven iOS Development with Swift&lt;/a&gt;을 기준으로 번역을 해가며 공부했다. 이곳에서 만드는 책들은 영어로 되어있어도 문법이나 단어가 어렵지 않아서 이해하는데에는 크게 문제가 안되었다. 그리고 단계별로 테스트를 빨간불로 만든 후 초록불로 바꾸는데까지 굉장히 자세히 설명과 예제를 제시하고 있어서 스터디를 하는데 굉장히 좋은 책이었다. 그러면서 어떻게 테스트 케이스를 작성하는지 고민하고 서로 부족한 점이 있으면 보완해주었다. 다른분들이 정말 열심히 해주어서 내가 스터디에서 다른분들에게 배우는게 더 많았다.&lt;/p&gt;

&lt;p&gt;사실 TDD가 개념을 알겠지만 실제 프로젝트에서 적용해본적이 없어서 어떻게 테스트케이스를 만들어야 하는지가 더 어려운 문제였다. 근데 책에도 자세하게 나오고 하면서 이런부분에 테스트가 들어가야 겠다는 고민도 같이하면서 테스트케이스를 만드니까 조금씩 감이 생겼다. TDD는 단순히 이론만 알고있다고 할수 있는 개발방법론이기 보단, 실제로 많이 테스트 케이스를 작성해봐야 적용할 수 있는 개발방법이라고 생각되었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 프로젝트&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TDD를 적용하면서 간단한 앱이 만들어 졌다. 그 다음을 고민하다가 이걸로 끝내는게 아닌 릴리즈를 하는것으로 목표를 변경했다. 모두 단순히 스터디만 하고 끝내기 보단 결과물로 나오는것이 더 의미있다고 생각되어 진행하게 되었다. 그렇게 실제로 프로젝트를 진행하면서 예측가능 결과를 테스트코드로 확인하기 위해 먼저 테스트를 돌려보고 빨간불에서 초록불로 바꾸는 작업이 번거로운 것은 사실이지만 테스트를 위한 코드를 작성하게 되면 좀더 모듈화를 생각할수 밖에 없었기 때문에 코드작성에도 도움이 된다는 것을 느꼈다. 실제로 코드를 수정했을때 결과가 다르게 나와 빨간불로 나오는것을 보고 다시 초록불로 수정하게 되는것도 경험을 해보니 TDD에 신뢰도가 생겼다. 나중에 이렇게 개발하는것이 굉장히 편하다는 느낌도 받았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 릴리즈&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;릴리즈까지 틈틈히 시간을 내면서 진행하는데 스위프트의 버전이 3으로 변경됐고 데이터베이스를 몇번 변경했다. 다행히 크지 않은 프로젝트라 빠르게 적용하고 진행할 수 있었다. 우선 릴리즈를 끝냈지만 역시 그 이후가 더 중요했다. 피드백을 받아야 하고 아직 고치고 개선해야 할 것들이 많이 남아있다. 그래도 함께한 프로젝트라 의미가 있고 특히 현재 나는 호주에 와있는 상태여서 항상 행아웃으로 원격을 지원해 스터디를 함께해준 분들(찬주님, 선재님, 정훈님) 에게 너무 감사하다. 그래서 앞으로 더 기대된다.&lt;/p&gt;

</description>
        <pubDate>Mon, 21 Nov 2016 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2016-11-21-kakadu/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-11-21-kakadu/</guid>
        
        
        <category>Kakadu</category>
        
      </item>
    
      <item>
        <title>너무너무너무 고민되는 클래스이름 짓기</title>
        <description>&lt;p&gt;개발자라면 누구나 개발중 고민되는 것으로 이름짓기지 않나 싶다 특히 &lt;strong&gt;클래스이름짓기&lt;/strong&gt;
변수같은 경우도 마찬가지긴 하지만 클래스이름에 상당히 고민을 많이 한다.&lt;/p&gt;

&lt;p&gt;특히 자주쓰는 데이터베이스나 데이터를 관리하는 클래스 이름에 대해선 먼가 더 깔끔하고 좋은 이름이 없는지 
항상 고민하게 되는데 이런건 구글도 도와줄수 없는것이기 때문에 더욱더 힘들다.&lt;/p&gt;

&lt;p&gt;나의 경우 첫직장에서 일하던 클래스를 보면 클래스들의 이름을
&lt;code class=&quot;highlighter-rouge&quot;&gt;Utils&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Helper&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Manager&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Wrapper&lt;/code&gt; 로 많이 작성했다.
지금도 &lt;code class=&quot;highlighter-rouge&quot;&gt;er&lt;/code&gt; 를 붙여서 클래스를 작명하는 건 많이 쓰긴 하지만 
그때그때 조금더 명확한 명칭을 붙이고 싶어서 더 고민하게 된다.&lt;/p&gt;

&lt;p&gt;특히 &lt;code class=&quot;highlighter-rouge&quot;&gt;Manager&lt;/code&gt;라는 것을 꽤 많이 사용하게 되는데 항상 고민끝에 저 이름을 붙이게 된다. 
뭔가를 특정 부분의 데이터들을 처리하는 클래스를 &lt;em&gt;관리&lt;/em&gt;한다는 뜻으로 사용하는게 의미상 맞는지 항상
고민을 하게되는데 최근에 검색을 하면서 꽤 오래된 포스트를 찾았는데 &lt;a href=&quot;http://www.bright-green.com/blog/2003_02_25/naming_java_classes_without_a.html&quot;&gt;Naming Java classes without a ‘Manager’&lt;/a&gt;를 읽으면서 작명을 할때 의미에 대해서 다시생각하게 되었다.&lt;/p&gt;

&lt;p&gt;검색을 해보면 영어권의 사람들도 작명에 대해 상당히 고민을 많이 한다는 것을 볼수있다.&lt;/p&gt;

&lt;p&gt;작명에 대한 질문에 대한 답변들을 보면 각자의 스타일이 있어서 주로쓰는 단어가 서로 다르고 
디자인패턴에서도 이름을 인용해 쓴다.&lt;/p&gt;

&lt;p&gt;그리고 찾을 수 있는 조금의 팁은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전혀 새로운 단어의 사용은 자제한다.&lt;/li&gt;
  &lt;li&gt;프레임워크에서 어떤 단어들을 사용하는지 찾아본다.&lt;/li&gt;
  &lt;li&gt;디자인 패턴에서 해당 패턴의 이름을 인용한다.&lt;/li&gt;
  &lt;li&gt;작명은 굉장히 중요하긴 하지만 너무많은 시간을 작명에 쓰지는 말것.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그중에 &lt;a href=&quot;http://source-code-wordle.de/&quot;&gt;Words used in Source Code&lt;/a&gt; 라는 사이트에서
닷넷프레임외에 몇가지 프레임워크에서 사용하는 명칭들을 사용수에 따라 시각화해서 보여주고있다.&lt;/p&gt;

&lt;p&gt;결론은 결국 작명에 대한 답은 없지만 계속해서 다른 프레임워크들은 어떻게 작명하는지 계속해서 보고
클래스의 역할에 대해 꾸준히 생각해야 하는 문제인것 같다.&lt;/p&gt;

&lt;p&gt;아래는 작명에 대한 글들과 StackOverflow 질문들이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1866794/naming-classes-how-to-avoid-calling-everything-a-whatevermanager&quot;&gt;Naming Classes - How to avoid calling everything a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;WhatEver&amp;gt;Manager&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1194403/what-names-do-you-find-yourself-prepending-appending-to-classes-regularly&quot;&gt;What names do you find yourself prepending/appending to classes regularly?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.c2.com/?DontNameClassesObjectManagerHandlerOrData&quot;&gt;Dont Name Classes Object Manager Handler Or Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bright-green.com/blog/2003_02_25/naming_java_classes_without_a.html&quot;&gt;Naming Java classes without a ‘Manager’&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 13 Nov 2016 21:38:00 +0900</pubDate>
        <link>http://localhost:4000/2016-11-13-naming-for-class/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-11-13-naming-for-class/</guid>
        
        
        <category>개발관련</category>
        
      </item>
    
      <item>
        <title>Xamarin 으로 크로스플랫폼 개발</title>
        <description>&lt;h4 id=&quot;이상한모임에서-발표했던-자료로-정리된-포스팅을-올립니다&quot;&gt;&lt;em&gt;이상한모임에서 발표했던 자료로 정리된 포스팅을 올립니다.&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Xamarin 은 2011년 부터 창립된 모노 프로젝트를 기반으로 한 모바일 크로스 플랫폼 개발 플랫폼이다. 웹뷰를 기반으로 하는 크로스 플랫폼 개발과는 다르게 C#으로 작성한 코드를 모노 프레임워크를 통해 네이티브 코드로 변환을 해서 빌드를 한다. React Native와 같은 방식인데 아직 정식버전이 나오지 않았지만 Xamarin은 정식으로 나온지 꽤 오래되었고 지금까지 관련된 툴과 서비스들이 출시되었다.&lt;/p&gt;

&lt;p&gt;최근엔 MS가 Xamarin을 인수하면서 엄청난 지지를 받으며 MS가 추구하고 있는 크로스 플랫폼 개발에 역할을 제대로 하고 있다.&lt;/p&gt;

&lt;p&gt;개인적으론 크로스 플랫폼 개발에 대해서 부정적인 생각이 더욱 많아 추천하지 않는 편인데 그 이유는 장기적인 유지보수와, 개발에 걸리는 (문제를 해결하는데 걸리는) 시간이다. 같은 코드로 여러가지 플렛폼을 지원할 수 있다는 것은 굉장한 장점이다. 하지만 정말 같은 코드로 모든 문제를 해결할 수 있을까? 특히 안드로이드 같은 경우는 안드로이드 폰을 제조하는 회사마다 사양이 각각 다르고 OS에 따라 디바이스에 따라 조금씩 버그와 빌드버전이 다르다. 그에 따라 발생하는 이슈들은 이슈마다 해결방법이 다르겠지만 공통된 문제가 아닌 특정 기기의 문제를 수정해야 하는문제가 발생한다면 여기서부터 크로스 플랫폼의 의미는 달라진다고 생각된다.&lt;/p&gt;

&lt;p&gt;예전에 웹뷰를 랩핑해서 개발하는 크로스 플랫폼이었다면 페이스북에서 개발중인 ReactNative와 Xamarin은 완전히 다르다. 네이티브 코드로 직접 변환해 준다는 것으로 웹뷰기반의 크로스플랫폼과는 전혀다른 퍼포먼스로 네이티브로 제작된 앱과 차이가 거의 없이 결과물을 낼수 있다.&lt;/p&gt;

&lt;p&gt;특히 Xamarin은 Xamarin.form 이라는 공통UI를 제공하는데 특별히 커스터마이즈된 UI가 필요하지 않다면 이것으로 기본제공되는 UI들을 빠르게 개발할수 있고 UI와 로직부분을 완전히 공유하는 코드로 작성할 수 있다.&lt;/p&gt;

&lt;p&gt;만약 특정 기기별로 개발을 다르게 가야한다면 로직부분만 공유하는 공통프로젝트(Shared)를 만들고 각각의 플랫폼별로 따로 개발하는 방법도 가능하다.&lt;/p&gt;

&lt;p&gt;IDE는 맥과 윈도우에서 개발하는 환경을 모두 제공하지만 개인적으로는 윈도우에서 Visual Studio와 함께 개발하는 방법을 추천한다. 그리고 아이폰 빌드의 경우 맥이 필요한데 리모트로 빌드가 가능하다.&lt;/p&gt;

&lt;p&gt;마지막으로 Xamarin에서 강점이라고 생각하는 것은 테스트인데 Cloud Test 를 제공한다. 모든 디바이스를 가지고 있지 않더라도 Cloud Test를 이용해 가상으로 모든 디바이스를 테스트 할 수 있다. 
이 테스트에서는 UI 테스트가 가능한데 터치 시나리오를 만들어서 모든테스트에서 UI가 테스트 가능하다. 그리고 실패한 테스트와 일부 테스트를 실패한 기기별로 리포트를 작성해준다. 유료서비스 이지만 가입후 몇일동안 무료로 테스트를 가능하게 해주니 관심이 있다면 무료로 해보는것도 좋을듯하다.&lt;/p&gt;

&lt;p&gt;아래는 이상한모임에서 발표한 슬라이드이다.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;&lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/zA4yvFmp840Lqw&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; scrolling=&quot;no&quot; style=&quot;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&quot; allowfullscreen=&quot;&quot;&gt; &lt;/iframe&gt; &lt;div style=&quot;margin-bottom:5px&quot;&gt; &lt;strong&gt; &lt;a href=&quot;//www.slideshare.net/HanulPark3/weirdmeetup-xamarinpresentation&quot; title=&quot;Weirdmeetup xamarin-presentation&quot; target=&quot;_blank&quot;&gt;Weirdmeetup xamarin-presentation&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a target=&quot;_blank&quot; href=&quot;//www.slideshare.net/HanulPark3&quot;&gt;Hanul Park&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;div&gt;

&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 21:38:00 +0900</pubDate>
        <link>http://localhost:4000/2016-06-20-crossplatform-development-with-xamarin/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-06-20-crossplatform-development-with-xamarin/</guid>
        
        
        <category>Xamarin</category>
        
      </item>
    
      <item>
        <title>Jekyll 설치</title>
        <description>&lt;p&gt;지금 사용하고 있는 블로그의 엔진은 Jekyll을 사용하고 있는데 Github에서 제공하는 호스팅을 사용하고 있다. 블로그를 운영하기에 큰 제약사항이 없고 편하게 사용하기 좋아 사용하는데 로컬에서 블로그를 구동하려면 몇가지 요구조건을 맞춰서 설치를 해야한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mac 환경에서 작업을 했다.&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ruby 버전 확인
    - 터미널을 실행한다.
    - ‘ruby –version’ 명령어로 버전을 확인한다.
    - 2.0.0 또는 그 이상 버전이면 로컬에서 Jekyll을 동작시킬 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;bundler 설치
  	- &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt; 명령어로 bundler 패키지를 설치한다.
  	- 퍼미션 요구로 설치가 안된다면 sudo 명령어로 설치.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;블로그로 사용할 git repository를 생성한다.
    - ‘git init my-jekyll-blog-name’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Jekyll 설치
    - git repository의 root directory로 가서 ‘Gemfile’ 이라는 이름의 파일에 아래 내용을 입력한다.
    `
    source ‘https://rubygems.org’
    gem ‘github-pages’, group: :jekyll_plugins
    `
    - &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 을 실행하면 Jekyll이 설치가 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Exception
    &lt;ul&gt;
      &lt;li&gt;ERROR: Failed to build gem native extension.
 이런 에러가 난다면 
 &lt;code class=&quot;highlighter-rouge&quot;&gt;xcode-select --install&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;을 설치하면 해결된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt; 로 로컬에서 블로그를 실행할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Jekyll 의 테마&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jekyll wiki에 여러가지 theme 이 올라와있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Themes
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/jekyll/jekyll/wiki/themes&quot;&gt;https://github.com/jekyll/jekyll/wiki/themes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 15 Apr 2016 21:38:00 +0900</pubDate>
        <link>http://localhost:4000/2016-04-15-installation-jekyll-with-github/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-04-15-installation-jekyll-with-github/</guid>
        
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>멜번에서 이상한모임 밋업 후기</title>
        <description>&lt;p&gt;2016년 02월 16일 호주에서 처음 이상한모임이 열렸다. @justinchronicle 님과 @haruair 님의 주관으로 열린 이번모임은 멜번에 계신 한국인 개발자분들을 초대로 첫번째 모임을 진행하였다. 시작전 부터 많은 분들이 관심을 보여주셨고 그날 출장으로 인해 아쉬움을 나타낸 분도 계셨다.&lt;/p&gt;

&lt;p&gt;이날은 저스틴님의 회사에 세미나실을 빌려 행사를 진행했다. 오후 5:30 부터 시작하는 모임이라 빌딩엔 사람이 거의 다니지 않았다. 엘레베이터로 가보니 반가운 종이가 붙어있었다 :) 멜번에선 한글을 이렇게 보기 어려운데 친절하게 이렇게 안내문구를 써주셨다.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/25142262325/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-1&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1661/25142262325_1a54f25c8d_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-1&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;엘레베이터에서 내리니 다시한번.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/25142261605/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-2&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1652/25142261605_d817e7b4c8_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-2&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;그리고 마지막으로.. ㅎㅎㅎ&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/24846599620/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-3&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1670/24846599620_4beb10075d_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-3&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
그리고 세미나실로 들어가니 이렇게 이상한모임 프레젠테이션을…&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/25115922306/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-4&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1663/25115922306_348156bd98_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-4&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;멜번 개발자 밋업을 여러번 다녀봤지만 한번도 빠지지 않았던것은 피자와 맥주… 역시 먹음직 스럽게 준비되어있었다. 저녁시간이라 그런지 오시는 분들 모두 피맥을 즐기셨다.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/25115916686/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-7&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1563/25115916686_4a98d74140_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-7&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/25048977301/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-9&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1706/25048977301_59e4a9819b_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-9&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;친절하게 모임을 시작하고 알려주신것은 화장실 위치부터 발표를 순서대로 주제를 알려주셨고 프리젠테이션이 시작되었다.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/24515403243/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-13&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1687/24515403243_b6b8b7a526_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-13&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/25024000212/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-14&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1680/25024000212_48b7212a17_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-14&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/24774563409/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-15&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1480/24774563409_54549af838_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-15&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/24515402553/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-16&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1694/24515402553_3c680f2db7_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-16&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;역시 다들 실력자분들이라 모든 분들이 경청을 하게되었고 특히 인상적이었던 용균님의 라이브코딩 ㅎㅎ 쑥스러워 하시면서 결국 해내셨다.&lt;/p&gt;

&lt;p&gt;&lt;a data-flickr-embed=&quot;true&quot; href=&quot;https://www.flickr.com/photos/96275650@N03/25023998682/in/dateposted-public/&quot; title=&quot;wierdmeetup-in-mel-18&quot;&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1687/25023998682_a1b49b7238_z.jpg&quot; width=&quot;480&quot; height=&quot;640&quot; alt=&quot;wierdmeetup-in-mel-18&quot; style=&quot;display: block; margin: 0 auto;&quot; /&gt;&lt;/a&gt;&lt;script async=&quot;&quot; src=&quot;//embedr.flickr.com/assets/client-code.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;끝에 다른일이 있어서 모임을 종료하자마자 나가봐야했지만 네트워크 시간이 있었을텐데 그걸 참여하지 못해서 아쉽다. 오신분들 모두 호주 IT회사에에서 매니져급이나 관리자급으로 좋은 위치에 계신분들 많은것 같았다. 다음번엔 끝까지 함께뵈었으면 좋겠다.&lt;/p&gt;

&lt;p&gt;사실 처음에 저스틴님이 사람들이 잘 안올것 같다고 우려했던 것과는 달리 사람들이 꽉 차게 모두 오셨고
저스틴님의 회사 세미나실을 빌려 이번모임을 가졌는데 개인적인 생각으론 어쩌면 다음 모임은 더 큰곳을 빌려야할 듯하다.&lt;/p&gt;

&lt;h4 id=&quot;videos&quot;&gt;&lt;strong&gt;videos&lt;/strong&gt;&lt;/h4&gt;

&lt;div&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/_QcU1-YpkFQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; style=&quot;display:block;margin:0 auto;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/jkd-8_jMpcY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; style=&quot;display:block;margin:0 auto;&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xFgnCPBludc&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; style=&quot;display:block;margin:0 auto;&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Sat, 20 Feb 2016 21:38:00 +0900</pubDate>
        <link>http://localhost:4000/2016-02-20-the-first-weird-meetup-in-mel/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-02-20-the-first-weird-meetup-in-mel/</guid>
        
        
        <category>이상한모임</category>
        
      </item>
    
      <item>
        <title>[Git] SourceTree 에서 upstream 추가하기</title>
        <description>&lt;p&gt;Github 이나 Bitbucket 같은 곳에서 오픈소스 프로젝트 혹은 컨트리뷰터로 참여하려면 내 계정으로 fork를 한 후에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pull request&lt;/code&gt; 를 해서 원본 저장소에 머지 요청을 한다.&lt;/p&gt;

&lt;p&gt;근데 fork 받은 소스를 수정하거나 기능을 추가하는 도중 원본 저장소의 최신 버전으로 올라간다면 내가 fork 받은 소스도 최신으로 유지를 시키는 작업이 필요할 것이다.&lt;/p&gt;

&lt;p&gt;나는 주로 &lt;code class=&quot;highlighter-rouge&quot;&gt;SourceTree&lt;/code&gt; 를 사용하는데 로컬로 클론시킨 저장소에서 원본소스의 최신버전으로 소스를 유지할 수 있게 하는 방법을 적어본다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;메뉴의 Repository -&amp;gt; Repository Settings 을 선택한다.&lt;/li&gt;
  &lt;li&gt;Remotes 패널의 Add 버튼을 누른다.&lt;/li&gt;
  &lt;li&gt;원본 저장소의 URL과 이름 (&lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;) 을 지정한 후 저장한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그 이후는 Pull 버튼을 눌러서 받아올 저장소를 지정해서 최신버전의 소스를 가져올 수 있다.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Feb 2016 07:38:00 +0900</pubDate>
        <link>http://localhost:4000/2016-02-20-add-upstream-at-fork-repository/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-02-20-add-upstream-at-fork-repository/</guid>
        
        
        <category>Git</category>
        
      </item>
    
  </channel>
</rss>
