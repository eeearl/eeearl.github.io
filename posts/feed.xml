<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog.eeearl.com</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 07 Feb 2018 03:03:57 +0900</pubDate>
    <lastBuildDate>Wed, 07 Feb 2018 03:03:57 +0900</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>2017 회고</title>
        <description>&lt;p&gt;작년에 쓰다말고 두었던 회고록을 다시 써본다. 두달정도 지난동안 또 많은 일들이 생겨버렸네,,&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;이 글을 작성하기 전 2016년의 회고록을 다시 읽어보았다. 역시나, 제대로 한것이 없었다. 스스로 다시 마음을 다잡고 성실한 한해를 살아가야겠다.&lt;/p&gt;

&lt;p&gt;작년 2017년에는 한해에 두번의 겨울을 보내야 했다. 
멜번의 겨울과 한국의 겨울, 
나에게 두번의 겨울은 참 추웠었다.&lt;/p&gt;

&lt;h1 id=&quot;멜번의-겨울&quot;&gt;멜번의 겨울&lt;/h1&gt;
&lt;p&gt;뜨겁고 활기한 멜번의 여름이 지나갈 때 즈음 여러가지 변화가 생겼었다. 그중 가장 큰 변화는 내 마음이었다.&lt;/p&gt;

&lt;p&gt;어느정도 예상은 하고 있었지만 회사에서 나를 고용할 때 이야기한것과 달리 회사를 더이상 신경쓸 수 없다는 이야기와 가끔 필요할 때 같이 일하자는 내용으로 나에게 통보했다. 
  제품 개발이 완료되고 얼마되지 않아 이런 이야기를 들었다. 같이 골프를 치며 개발한 앱을 테스트했고, 일주일 정도 나에게 정리할 시간을 주었다.&lt;/p&gt;

&lt;p&gt;그때 당시 호주의 이민자 법이 개정된다는 이야기가 공식으로 발표되었고 더욱 워킹비자, 영주권취득이 어려워졌었다. 그래서인지 나도 여러가지 이유로 서서히 호주생활에 서서히 어려움을 느끼고 있었다.&lt;/p&gt;

&lt;p&gt;다시 겨울이 찾아왔을 때, 흔들리는 마음을 잡아야 겠다고 생각했고 내가 호주를 떠나 해야할 것이 무엇인지 고민하게 되었다.&lt;/p&gt;

&lt;p&gt;그리고&lt;/p&gt;

&lt;p&gt;조금씩 주변 친구들에게 한국으로 떠날것이라고 작별인사를 시작했다.&lt;/p&gt;

&lt;p&gt;그 후 한달정도를 여행을 하며 보냈다. 처음 호주를 올때부터 가려고 했었지만 가지 않았던 뉴질랜드에도 다녀오고 
  멜번에서 내가 다녔던 모든 곳을 다시한번 가보았다. 좋아하는 커피집에 가서 커피도 매일 마셨다.&lt;/p&gt;

&lt;p&gt;시간이 갈수록 내마음에 아쉬움과 후련함이 채워졌고 이런생활을 더이상 하지못한다는 생각에 하루하루를 책을 정독하듯이 보냈다.&lt;/p&gt;

&lt;h1 id=&quot;한국의-겨울&quot;&gt;한국의 겨울&lt;/h1&gt;
&lt;p&gt;한국에 온날은 완전 뜨거운 여름이었다. 근데 나는 스웨터를 입고있었다. 부모님의 도움으로 공항에서 집까지 왔고 뭔가 특별할줄 알았던 한국도착이 그냥 일상처럼 느껴졌다. 군대에서 제대한 후 집으로 돌아온 느낌이었다. 그 후 가족끼리 여행도 가고 바베큐를 먹으면서 여러가지 멜번생활의 일들을 이야기했다.&lt;/p&gt;

&lt;p&gt;한달 정도뒤 일본행 준비를 했다. 기간은 한달을 잡았고 일본의 생활을 알아보기 위함이었다. 그당시 두가지의 일을 소화해야 했었는데 처음엔 후회했었지만 두개의 일을 마치고 난 후 무리를 조금하긴 했지만 잘한일이라고 생각했다. 그 이유는 일본에서 살짝 생활고가 왔었기 때문에 일을 마친 후 그 돈으로 버틸 수 있었기 때문이다.&lt;/p&gt;

&lt;p&gt;그리고 일본의 도쿄생활이 만만치 않다는것을 느끼고 돌아왔고,,
  그뒤에 병원에 입원하게 되었다. A형 간염에 걸렸는데 어디서 걸린지 알수 없었다. 그렇게 갑작스럽게 한달 이상을 병원에서 지내게 되었다.&lt;/p&gt;

&lt;p&gt;두달 가까이를 병원에서 아무것도 하지 못한채 보냈고 계절이 겨울로 바뀌어있었다. 앞으로 어떤것을 할지 계획을 세웠고 이제 막 출발하려는 시기에 2017년이 끝나버렸다.&lt;/p&gt;

&lt;h1 id=&quot;기회&quot;&gt;기회&lt;/h1&gt;
&lt;p&gt;간염을 앓고 있을때 모든것이 무기력해져 버려서 푹쉬었다, 그렇게 완치되고나서 퇴원을 하니 모든것이 막막했다. 길을 잃은 느낌이었다. 딱히 계획한것은 없었지만 시간을 많이 버려졌다는 생각에 이것저것 내가할 수 있는 것들을 생각하고 알아보았다.&lt;/p&gt;

&lt;p&gt;신중하게 생각하고 조사하기 시작했다. 회사를 입사할지, 사업을 시작할지, 천천히 고민하는 도중 일본에서 IT회사 면접의 기회가 생겼다.&lt;/p&gt;

&lt;p&gt;한달 뒤에 일본행 비행기를 타고 도쿄에 도착했고 몇일 후에 면접을 보았다. 그리고 한국을 돌아와서 공항에 도착 후 회사로 부터 메일을 받았다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;결과는 합격이었지만 사실 마음이 더 무겁다. 이미 일본회사를 들어가기로 정했지만 내가 생각하기에 갑작스러운 도전이었기 때문이다. 일본어를 배우고 사내문화, 회사문화 등등을 부딪히며 배워야한다.&lt;/p&gt;

&lt;p&gt;돌아보면 몇개월 만에 엄청많은 일들이 벌어지면서 내 스스로 정신이 없다.&lt;/p&gt;

&lt;p&gt;앞으로 다시 계획을 세워야 하는데 가장 큰 목표는 일본생활 적응이다. 일본어회화를 포함한 모든것이 일본생활 적응이라고 생각하기 때문에 우선 생활안정이 올해 1순위 목표가 될것같다. 그리고 건강을 항상 챙기는것은 필수가 되어버렸다. 2018년은 아프지 말고 건강히 보내자&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Feb 2018 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2018-02-07-reviewing-and-resolution/</link>
        <guid isPermaLink="true">http://localhost:4000/2018-02-07-reviewing-and-resolution/</guid>
        
        
        <category>LifeStory</category>
        
      </item>
    
      <item>
        <title>[iOS] Xcode Build Configuration (빌드설정)</title>
        <description>&lt;p&gt;빌드시 Staging, Release, Development 로 나누어서 빌드환경을 설정한 후 개발을 하게되면
코드상으로 관리하는것 보다 훨씬 깔끔하고 빌드 목적에 맞게 관리가 가능하다.&lt;/p&gt;

&lt;p&gt;보통 URL, API Key 와 같은 것을 이용할때 쓰인다.&lt;/p&gt;

&lt;p&gt;아래 링크에 잘 정리되어있다!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.appcoda.com/xcconfig-guide/&quot;&gt;https://www.appcoda.com/xcconfig-guide/&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/a-cleaner-way-to-organize-your-ios-debug-development-and-release-distributions-6b5eb6a48356&quot;&gt;https://hackernoon.com/a-cleaner-way-to-organize-your-ios-debug-development-and-release-distributions-6b5eb6a48356&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Dec 2017 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2017-12-20-manage-to-different-build-settings/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-12-20-manage-to-different-build-settings/</guid>
        
        <category>xcode,</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>[iOS] Facebook Applinks 적용기</title>
        <description>&lt;h1 id=&quot;facebook-applinks-란&quot;&gt;Facebook Applinks 란&lt;/h1&gt;
&lt;p&gt;iOS 에서 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html&quot;&gt;Universal Links&lt;/a&gt; 의 개념과 같다.&lt;/p&gt;

&lt;p&gt;즉, 다른 앱에서 링크의 서비스의 컨텐츠를 눌렀을 경우 해당 네이티브 앱의 그 컨텐츠가 담겨있는 화면으로 바로 갈수 있게 하는 것이다.&lt;/p&gt;

&lt;p&gt;근데 페이스북(네이티브앱)에서 공유되어있는 컨텐츠를 눌렀을 경우, 앱 내에서 설정한 Universal Links가 동작이 되지 않는다. 그래서 Facebook 북에서 제공하는 &lt;a href=&quot;https://developers.facebook.com/docs/applinks/overview&quot;&gt;AppLinks&lt;/a&gt; 를 사용해서 Universal Links 처럼 동작시킬 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;applinks-가-되기-위해-필요한-작업&quot;&gt;Applinks 가 되기 위해 필요한 작업&lt;/h1&gt;

&lt;p&gt;앱링크가 작동되기 위한 링크를 만드는 두가지 방법이 있다&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;해당 링크의 메타태그에 필요한 데이터들을 추가 (문서에 정리되어있다, &lt;a href=&quot;https://developers.facebook.com/tools/debug/og/object/&quot;&gt;tool&lt;/a&gt;로 미리 디버깅도 할 수 있다.)&lt;/li&gt;
  &lt;li&gt;applinks 를 페북에서 생성
    - 링크자체를 만들면서 앱링크가 가능하게 페이스북 내에서 생성할 수 있다.
    - &lt;a href=&quot;https://developers.facebook.com/tools/app-ads-helper&quot;&gt;앱 광고 지원도구&lt;/a&gt; 에서 가장 아래의 개발자도구 탭에서 페이스북에서 생성하는 Deeplink를 테스트해 볼수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;공식 문서를 따라하면 어느정도 필요한 작업들을 거치기 때문에 기본적인 구현은 되지만, 나중에 앱에서 실행을 해보니 여전히 그냥 웹페이지로 넘어가고 있었다. 한참을 헤매다가 알아낸것은 오른쪽 위에 점이 세개 있는 버튼을 누르니 앱으로 바로 가는 옵션이 생겨있었다..&lt;/p&gt;

&lt;p&gt;문서에 보면 ‘should_fallback=false … The iOS app link for your content will be sent to your app’ 이라고 설명되어있다. should_fallback 의 기본값은 true여서 해당 링크의 메타태그에 false 로 명시를 해주지 않으면 페이스북 앱내에서 해당 앱으로 넘겨주는 동작을 하지 않는다. 그리고 히든메뉴로 앱을 이동하게끔 해준다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta property=&quot;al:web:should_fallback&quot; content=&quot;false&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;위의 메타태그를 추가해주면 우리가 생각하는(?) 앱링크의 시나리오 대로 바로 앱으로 연결되는 모습이 보일 것 이다.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Dec 2017 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2017-12-20-setting-applinks-on-ios/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-12-20-setting-applinks-on-ios/</guid>
        
        <category>xcode,</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>[iOS] UITextField Padding 설정</title>
        <description>&lt;h1 id=&quot;1-leftview-rightview-추가&quot;&gt;1. leftView, rightView 추가&lt;/h1&gt;

&lt;p&gt;₩₩₩
let paddingView = UIView(frame: CGRect(x: 0, y: 0, width: 4, height: textField.frame.height))
textField.leftView = paddingView
textField.leftViewMode = .always
textField.rightView = paddingView
textField.rightViewMode = .always
₩₩₩&lt;/p&gt;

&lt;p&gt;장점: 이 방법은 UITextField 에서 제공하는 양옆에 뷰를 추가할 수 있는 영역에 empty뷰를 넣어서 여백을 주는 방법으로 간단하게 사용할수 있지만
단점: 이것을 사용하면 편집중 생기는 클리어버튼(x버튼)이 사라질 수도 있다.&lt;/p&gt;

&lt;h1 id=&quot;2-calayer-변경&quot;&gt;2. CAlayer 변경&lt;/h1&gt;

&lt;p&gt;textField.layer.sublayerTransform = CATransform3DMakeTranslation(5, 0, 0)&lt;/p&gt;

&lt;p&gt;Core Animation Layer 를 사용해서도 padding처럼(?) 효과를 줄 수 있다.&lt;/p&gt;

&lt;p&gt;장점: 한줄로 간단하게 효과를 줄 수 있지만
단점: 원하지 않게 다른 뷰들도 영향이 간다. 예를 들어 leftVIew, rightView도 함께 위치가 변경되어있다&lt;/p&gt;

&lt;h1 id=&quot;3-subclass&quot;&gt;3. SubClass&lt;/h1&gt;

&lt;p&gt;class PadedTextField: UITextField {&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var insetX: CGFloat = 10
var insetY: CGFloat = 10

override func textRect(forBounds bounds: CGRect) -&amp;gt; CGRect {
    return bounds.insetBy(dx: insetX, dy: insetY)
}

override func editingRect(forBounds bounds: CGRect) -&amp;gt; CGRect {
    return bounds.insetBy(dx: insetX, dy: insetY)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;장점: 뷰의 top, bottom, left, right 모두 padding 을 주는것이 가능하다
단점: Padding 을 주기 위해 Subclassing 을 해야한다.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Dec 2017 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2017-12-19-ios-customize-uitextfield/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-12-19-ios-customize-uitextfield/</guid>
        
        <category>xcode,</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>[RxSwift] RxSwift 를 프로젝트에 사용하게 된지 2주가 되었다.</title>
        <description>&lt;p&gt;Rx 를 공부한지는 2달정도 전 부터 였던것 같다. 현재 하고 있는 iOS 프로젝트를 위해 공부한다는 생각을 하고 RxSwift 로 자료를 찾아봤다.&lt;/p&gt;

&lt;p&gt;처음엔 &lt;a href=&quot;https://github.com/ReactiveX/RxSwift/&quot;&gt;공식 Github Repository&lt;/a&gt; 에 가서 설치를 하고 따라해보았다.&lt;/p&gt;

&lt;p&gt;생각보다 어렵진 않았던것 같은데 이걸 어떻게 모든곳에 적용해야 하는지 잘 감이 오지 않았다. 그렇게 이해 해보려고 노력을 하다가 첫커브를 오르기가 쉽지 않아 잠깐 쉬어버렸다. 그리고 나중에 다시 보니 조금 더 이해가 되는 느낌이었다. 그렇게 몇번을 반복했다. 많은 토이프로젝트를 만들어서 생각해본대로 이렇게 저렇게 만들어 보기를 해보니 UI는 이미 다 구현이 되어있어서 Rx로 구현하는게 어렵지 않아졌다.&lt;/p&gt;

&lt;p&gt;여기까지 오는데 한달이 조금넘게 걸린것 같다. 알듯 말듯 한 이해들이 나를 더 복잡하게 만들기도 했는데 그럴때 마다 다른 사람들이 만들어 놓은 RxSwift 프로젝트들을 보고 정리를 했다. (Github 에서 RxSwift 로 작성한 프로젝트를 오픈한 레포들이 많다.)&lt;/p&gt;

&lt;p&gt;Observer 의 구현체들이 몇개 있는데 무엇이 다른지 이해하려면 Hot, Cold 라는 개념을 정리하면, 사용하기 조금 쉬워지는데 상황에 맞게 적절히 사용하기 위해 꼭 알아야 하는 개념이다.&lt;/p&gt;

&lt;p&gt;이미 UI에 대한 구현은 다 되어있어서 프로젝트에 적용하기 시작했다. 가장 단순한 화면부터 Rx로 바꾸었다.
View가 Observer 이고 Subscript 를 바인딩하는게 처음엔 어색했지만 나중엔 이해도되고 코딩 속도도붙어서 전부는 아니지만 대부분 Rx 로 바꿨다.&lt;/p&gt;

&lt;p&gt;조금 복잡한 구현이 되어있는곳은 많은 곳을 손대야 해서 손대기 어려웠지만 많이 복잡하지 않은 곳은 Operator를 적용해 가며 데이터를 가공하고 처리하기 시작했다. Rx의 높은 러닝커브의 이유중 하나가 수많은 Operator 들인데 비슷한 이름들이 많고 단순히 데이터를 처리하는 것이 아니라 Memory safty 를 위해 어떠한 처리를 해주는 것까지 알아야 하는게 좀 난관이다. 처음엔 그림으로 설명을 많이 해주는것이 이해가 잘 되지 않았었는데 Operator 특징을 알아가면서 이해가 되었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;RxSwift 에 대해 아직 공부해야 할 것들이 많이 남아있지만 쉬운것부터 프로젝트에 적용하면서 익히는것이 좋을 것 같다는 생각이 들어서 시작하게 되었다. 프로젝트는 혼자 하고 있는 것이라 쉽게 적용해볼 수 있었다. Rx 브랜치를 새로 만들어서 그곳에서만 따로 Rx 로 구현된 코드를 관리했다.&lt;/p&gt;

&lt;p&gt;UI 에 코드를 작성하면서 반복작업을 하다보니 &lt;a href=&quot;https://github.com/ul7290/RxSwiftSnippets&quot;&gt;Snippet&lt;/a&gt; 을 작성하였다. UI에 관련된 작은 코드들 이지만 생각보다 rx 코딩하는게 짧진 않아서 항상 헷갈리는 코드를 빠르게 작성 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ul7290/RxSwiftSnippets&quot;&gt;RxSwiftSnippets Github Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Links&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/LeoMobileDeveloper/awesome-rxswift&quot;&gt;https://github.com/LeoMobileDeveloper/awesome-rxswift&lt;/a&gt; 
&lt;a href=&quot;https://github.com/DroidsOnRoids/RxSwiftExamples&quot;&gt;https://github.com/DroidsOnRoids/RxSwiftExamples&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Jul 2017 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2017-07-01-rxswift-basic/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-07-01-rxswift-basic/</guid>
        
        <category>xcode,</category>
        
        <category>rxswift</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Carthage 에서 Cocoapods 으로 모든 프레임웍을 이동했다.</title>
        <description>&lt;p&gt;프로젝트를 진행하면 유용하고 좋은 서드파티 프레임웍이나 커뮤티니 형성이 잘된 오픈소스 그룹에서 (&lt;del&gt;능력자들이&lt;/del&gt;) 만든 좋은 오픈소스 를 써서 개발속도를 높이거나 그리고 좋은 프레임웍은 코드품질도 높힐 수 있기 때문에 iOS 프로젝트를 들어가게 되면 필수적으로 Carthage 나 Cocoapods 를 사용해서 Dependency 프레임웍을 관리한다.&lt;/p&gt;

&lt;p&gt;최근에 진행하고 있는 프로젝트에선 처음에 Carthage 를 사용했었는데 그 이유는,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Workspace 를 사용할 필요가 없다. (Cocoapods의 경우 알아서 Workspace 를 만들어 준다.)&lt;/li&gt;
  &lt;li&gt;패키지 파일의 작성이 좀더 간단명료하다.&lt;/li&gt;
  &lt;li&gt;바이너리 프레임웍으로 미리 빌드를 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Carthage 를 사용하면서 드는 점은 개발중인 프로젝트와 확실히 프레임웍들이 독립적인 형태를 만들어 주는 느낌이 든다. (Carthage 팀이 이런 의도로 이 프로젝트를 시작했다고 한다.)&lt;/p&gt;

&lt;p&gt;그리고 프로젝트를 진행하면서 구글과 페이스북의 SDK 들을 설치해서 사용을 해야했는데 직접 다운로드를 받아 사용하는 방법과 Cocoapods를 통한 방법만 제공하고 Carthage 는 정식지원을 해주지 않는다. 그래서 중간엔 Carthage와 Cocoapods를 둘다 사용을 했었다. (결국 Workspace를 만들게 됐다는…)&lt;/p&gt;

&lt;p&gt;이렇게 두가지를 모두 사용하면서 느낀점은 프로젝트가 굉장히 커지는 느낌이 들고 실제로 용량도 상당해졌다. Carthage 는 flag 를 줘서 &lt;code class=&quot;highlighter-rouge&quot;&gt;ios&lt;/code&gt; 용만 따로 빌드할수 있지만 framework 파일 자체의 용량이 상당히 컸다. 그리고 캐쉬 파일들도 많이 생겨서 지저분해 보였다. 가끔 직접 추가해야 하는 프레임웍도 일일히 관리하는게 상당히 불편했다.&lt;/p&gt;

&lt;p&gt;결국 Cocoapods 로 전부 옮겨와서 관리하고 있다. 둘다 분명한 장단점이 있지만 마지막에 수동으로 추가삭제를 해야하는게 갯수가 많아지니 가끔 충돌이 나서 정리해야하는 번거로움이 있었다. 특히 구글은 기능하나만 쓰고싶었는데 한가지 기능을 위해 4-5가지를 설치해야 하는 것때문에 상당히 애를썼었다.&lt;/p&gt;

&lt;p&gt;개인적으로 많은 프레임웍을 쓰지 않는다면 Carthage 를 쓰는것이 깔끔하고, 구글이나 페이스북의 프레임웍을 쓰게되면 Cocoapods 을 쓰는게 관리에 좀더 나을것 같다.&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Carthage/Carthage&quot;&gt;Carthage Github&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://cocoapods.org/&quot;&gt;Cocoapods Website&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Jun 2017 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2017-06-28-carthage-and-cocoapods/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-06-28-carthage-and-cocoapods/</guid>
        
        <category>xcode,</category>
        
        <category>carthage,</category>
        
        <category>cocoapods</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Digital Ocean에 Cloud Flare로 https 쉽게 설정하기</title>
        <description>&lt;p&gt;최근 프로젝트에서 간단한 서버사이드와 통신을 하는 부분이 있었는데 애플쪽에서 통신관련된 부분에서 스펙을 https로 요구하고 있어서 고민하고 있던도중 @haruair 님의 조언으로 가장 간단한 방법은 &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloud Flare&lt;/a&gt;로 연결해주는 방법이라고 알려주셔서 적용해보았다.&lt;/p&gt;

&lt;p&gt;엄청 간단하게 다른 추가작업이 필요없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;를 적용할수 있고 단지 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;만 필요한 것이라면 무료로 이용이 가능하다.&lt;/p&gt;

&lt;p&gt;내가 작업했던 환경은&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Node.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정도였다.&lt;/p&gt;

&lt;p&gt;절차를 간략하게 설명하면&lt;/p&gt;

&lt;h4 id=&quot;cloud-flare-에서&quot;&gt;&lt;em&gt;Cloud Flare 에서&lt;/em&gt;&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloud Flare&lt;/a&gt;에 가입하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;https&lt;/code&gt;를 적용할 도메인을 입력 하면&lt;/li&gt;
  &lt;li&gt;알아서 도메인의 네임서버를 분석해서 어떤 값으로 교체하라는 화면이 친절하게 나온다.&lt;/li&gt;
  &lt;li&gt;도메인을 사용하는 서비스로 가서 네임서버를 바꿔준다.&lt;/li&gt;
  &lt;li&gt;메뉴에 DNS를 들어가 &lt;code class=&quot;highlighter-rouge&quot;&gt;DNS Records&lt;/code&gt; 에서 아래와 같이 입력해준다. {} 안은 해당하는 값으로 넣어준다.
    &lt;ul&gt;
      &lt;li&gt;A    {#DOMAIN_NAME#}    {#SERVER_IP_ADDRESS#}&lt;/li&gt;
      &lt;li&gt;CNAME www    {#DOMAIN_NAME#}&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;메뉴에  Crypto를 들어가 SSL을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Flexible&lt;/code&gt; 로 바꿔준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;server-에서&quot;&gt;&lt;em&gt;Server 에서&lt;/em&gt;&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Node.js 서버를 80포트로 서비스해준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제 약 1~2시간 정도 기다려주면 https로 접속해볼수 있다.&lt;/p&gt;

&lt;p&gt;일반적인 https를 적용하는 것이라면 SSL인증서를 받아서 서버안에서 많은 작업들을 해줘야 하는데 
Cloud Flare는 이 절차들을 엄청나게 간소화 시켜주었다. 네임서버만 변경해서 도메인과 서버의 중간에서 Cloud Flare의 SSL을 통해 https의 혜택을 받는것이다.&lt;/p&gt;

&lt;p&gt;이제 다른사람이 간단히 https를 이용할 것을 찾는다면 Cloud Flare를 추천한다.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Apr 2017 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2017-04-04-https-cloudflare/</link>
        <guid isPermaLink="true">http://localhost:4000/2017-04-04-https-cloudflare/</guid>
        
        <category>https,</category>
        
        <category>digitalocean</category>
        
        
        <category>Web</category>
        
      </item>
    
      <item>
        <title>2016년 회고록</title>
        <description>&lt;h1 id=&quot;2016년-회고록&quot;&gt;2016년 회고록&lt;/h1&gt;

&lt;p&gt;벌써 2016년 한해를 호주에서 보냈다. 
2015년 12월 31일, 작년 그때를 생각해보면 한마디씩 친구들 앞에서 말 한마디도 영어로 말을 못했었는데 지금은 친구들이 나에게 예전보다 영어를 더 편하게 듣고 말한다는 이야기를 들을 때마다 올해는 어떤 한 해를 보냈었는지 많은 생각이 든다.
현재는 호주인 회사에서 일을 하고 있다. 기대했던 것보단 부족한 게 많았지만, 지난 일들을 회상하며 더 나은 2017년을 위해 회고록을 작성해본다.&lt;/p&gt;

&lt;h2 id=&quot;워킹홀리데이&quot;&gt;워킹홀리데이&lt;/h2&gt;

&lt;p&gt;2016년 9월에 워킹홀리데이 비자가 만료되었는데 되돌아보면 많은 도전이 있었고 1년밖에 안 되는 시간이지만 많은 것을 느꼈고 배웠다고 생각한다.&lt;/p&gt;

&lt;p&gt;처음엔 개발회사나 개발에 관련된 업무를 할 것이라고 기대했던 것과는 다르게 3개월 정도를 개발회사에 지원과 인터뷰로 시간을 지냈다. 나머지는 계속해서 영어만 공부했는데 그때 조금 더 기준과 기대를 낮췄더라면 어땠겠냐는 생각을 해본다. 그래도 그동안에 경험이 있었기에 연단되어 지금까지 버틸 수 있었다고 생각한다. 다른 나라에서 외국인으로 살아간다는 것은 쉬운 일이 아니며 특히, 다른 문화 속에 그들처럼 혹은 그들과 함께 살려면 어떻게 해야 하는지 피부로 느꼈다.&lt;/p&gt;

&lt;p&gt;아무 일도 하지 않고 있다가 생활고가 어려워져서 시작했던 일은 데모도 부터 매장청소, 카페주방 그리고 중간에 웹사이트를 만드는 일과 게임을 만드는 일을 했었다. 데모도는 노동 쪽으로 소질이 있지 않으면 정말 어려운 일이었다. 거의 10년 동안 군대 전역 이후로 이런 일을 안 했는데 첫날 일을 하고 힘들지 않을 수 없었다. 짧은 기간 동안 일을 하고 그만두었지만 내가 하고 싶지 않던 하고 싶던 여기서 무엇을 해야 하는 알게 되었다. 의류매장에서 청소를 할 때도 카페에서 일할 때도 외국에서 살아가려면 어떤 것들을 할 줄 알아야 하는지 알게 되었고 일하는 동안 사람들을 만나면서 내가 IT쪽으로 일을 했다는 이야기를 주변 사람들이 알게 되면서 나에게 여러 정보도 주고, 사람들을 소개해주기도 하면서 웹사이트나 게임같은 돈을 받고 해보지 못했던 일도 해보았다.&lt;/p&gt;

&lt;p&gt;그리고 외국에선 봉사활동도 좋은 경험으로 인정해준다는 것을 예전부터 알고 있었는데 우연한 기회로 교회를 통해서 주말마다 홈리스들을 위해 모바일 샤워버스를 제공하고 음식을 같이 먹고 이야기를 하는 일도 꽤 오랫동안 하게되었다. 홈리스들을 대하는것이 처음엔 어려웠지만 하면서 익숙해지고 꾸준하게 열심히 일한 모습에 교회에서 레퍼런스도 받을 수 있었다.&lt;/p&gt;

&lt;p&gt;워킹홀리데이를 통해서 호주에 적응을 잘 할 수 있었다고 생각한다. 서양문화를 배울 수 있는 기회였고 다른 어떤 나라에 가도 잘 지낼 수 있다는 자신감도 생겼다. 내가 영어를 원래 잘하고 적응력이 좋았던 것이 아니라 도전을 하면서 기회들을 접할 수 있게 되었고 그렇게 생활하며 지금 여기까지 왔다고 생각한다. 아쉬운 게 많은 시간이었지만 후회는 하지 않는다.&lt;/p&gt;

&lt;h2 id=&quot;회사&quot;&gt;회사&lt;/h2&gt;

&lt;p&gt;워킹홀리데이의 마지막 즈음에 연락이 온 회사, 사실 인터뷰는 굉장히 예전에 봤었는데 잊고 있을 때 즈음 연락이 다시 왔다. 아직도 우리 아이템에 관심이 있냐고, 다시 인터뷰를 보는 줄 알았는데 자기들이 가지고 있는 아이디어를 굉장히 자세히 기술한 문서를 보여주었다. 내가 그 프로젝트를 하겠다고 결심하고 나서도 이후에 몇 번의 확인을 하는 미팅을 했었다.&lt;/p&gt;

&lt;p&gt;영어도 이 정도면 나쁘지 않다고 했고 실력을 조금 의심하는 눈치였지만 1달 정도 빠르게 프로토타입을 만들어 윤곽을 잡아서 보여주니 다행히 만족하는 것 같다. 큰 회사는 아니지만, 호주인과 같이 일하고 있고 일하면서 느끼는 건 한국과는 확실히 대우가 다르다. 일이 먼저가 아니라 사람이 먼저라는 느낌이다. 예를 들어 내가 일정을 무리하게 잡으면 건강을 먼저 챙기라는 말부터 해주고, 야근하려고 하면 좀 쉬고 하라면서 집에 보내준다. 아직 4개월밖에 일하지 못했지만, 앞으로 일하는 게 기대된다.&lt;/p&gt;

&lt;h2 id=&quot;프로그래밍-스터디&quot;&gt;프로그래밍 스터디&lt;/h2&gt;

&lt;p&gt;꾸준히 한국에서 리모트로 스터디를 진행했었고 스터디 &lt;a href=&quot;https://itunes.apple.com/app/id1123429371&quot;&gt;결과물&lt;/a&gt;도 나왔었다. 스위프트 스터디를 초창기 1.0이 발표되었을 때부터 3 까지 꾸준히 진행해왔다. 이젠 다른 언어보다 스위프트가 더 익숙한듯하다. 그리고 시간이 나면 틈틈이 오픈소스에 기여해보려고 노력했었다. 데일리코딩까진 아니지만 뭔가 배운 것을 매일 Github에 커밋하는 것도 해봤지만 내 체질은 아닌듯하다. 1달 정도 하고 중단되었다. 짧은 코드를 풀 리퀘스트 하는 시도는 몇 번 해봤었다. 영어가 조금씩 늘어가니까 영어로 작성하는 것도 조금씩 편해지고 더욱 도전하기 어렵지 않았었다.&lt;/p&gt;

&lt;p&gt;내년엔 조금 더 오픈소스에 이바지를 해보려 한다. 커밋메세지나 이슈등록들도 읽어보고 어떤 식으로 단어를 사용하는지 문법들 같은 것을 인식해가며 읽어보는 것도 프로그래밍에 관련해서 뿐만 아니라 영어에 상당한 도움이 된다는 것을 느꼈다.&lt;/p&gt;

&lt;h2 id=&quot;영어&quot;&gt;영어&lt;/h2&gt;

&lt;p&gt;호주생활에서 영어는 필수이다. 영어를 안 하게 될 수 없는 상황들이 많으므로 조금씩 늘 수밖에 없다. 물론, 노력은 해야 한다. 계속 사람들을 만나거나 밖에서 활동을 많이 해야 하는데 나는 야외활동을 잘하는 타입이 아니어서 일부러 많이 친구들을 만났다. 같은 집에 살던 영국 친구들과도 이야기를 하고 영어도 물어보고 그들의 표현을 따라 하기도 하면서 연습을 했었다. 제일 어려웠던 건 일상대화인데 익숙하지 않은 분야나 다른 문화를 가지고 있는 사람들과 일상대화를 한다는 게 굉장히 어려웠다. 여기는 축구(푸티), 크로켓, 테니스, F1, 이런 경기들이 굉장히 인기가 높은데 한국에서 이런 것은 비인기 종목이라 접해보지 못했기 때문에, 일부러 경기에 가서 보기도 하고 위키를 찾아보며 룰을 공부했었다.&lt;/p&gt;

&lt;p&gt;나중에 학원도 다닌 적이 있는데 어느 정도 영어가 좀 익숙해진다는 느낌이 들었을 때 학원을 가니까 또 한 번 느는 느낌이 들고. 이런 식으로 조금씩 조금씩 느는 것 같다. 이젠 좀 더 장문의 영어 글을 많이 읽는 습관들을 길러야겠다. 책도 읽고 뉴스도 많이 읽는 습관이 영어 실력에 엄청나게 도움이 된다.&lt;/p&gt;

&lt;h2 id=&quot;기대되는-2017년&quot;&gt;기대되는 2017년&lt;/h2&gt;

&lt;p&gt;2016년은 부족한 것도 많고 아쉬운 것도 많았지만 호주생활에 이제 겨우 한 걸음 나아갔다고 생각된다. 아직 계약직이긴 하지만 회사도 다니고 있고 시티에 살던 집도 조금 외곽으로 옮겨갔고 좀 더 좋은 환경에서 살고 싶다는 목표를 조금씩 실천하고 있다. 내년은 운동도 조금 더 관심을 두고 건강과 생활에 좀더 신경쓰기를 목표로 하고싶다. 디자인패턴 공부와 사진찍기도 그리고 글쓰기를 꾸준히 해갈 계획이다.&lt;/p&gt;

&lt;p&gt;항상 주변에서 신경 써주시며 견딜 수 있게 조언과 힘을 주신 분들이 있어 올해를 잘 끝낼 수 있었다고 생각한다. 좀 더 기대되는 2017년을 준비하며 2016년을 마친다.&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Dec 2016 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2016-12-28-adios-2016/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-12-28-adios-2016/</guid>
        
        
        <category>LifeStory</category>
        
      </item>
    
      <item>
        <title>카카두 첫 릴리즈 후기</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://itunes.apple.com/app/id1123429371&quot;&gt;카카두(KAKADU)&lt;/a&gt; 앱이 앱스토어에 정식등록이 되었다. 처음부터 프로젝트로 진행한건 아니고 스터디로 시작된 프로젝트였다 스터디를 시작한건 2016년 5월 즈음이었는데, &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;TDD&lt;/a&gt;를 다시 공부해보려고 시작한 Xcode 프로젝트가 앱스토어에 출시까지 되어버렸다. 진행하면서 느끼고 배운것들을 공유하고 싶어서 글로 적어본다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. 스터디&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;처음엔 그냥 iOS TDD 스터디였다. 최신의 스위프트를 사용하고 (그때 당시엔 Swift2를 사용했다.) &lt;a href=&quot;https://www.packtpub.com/application-development/test-driven-ios-development-swift&quot;&gt;Test-Driven iOS Development with Swift&lt;/a&gt;을 기준으로 번역을 해가며 공부했다. 이곳에서 만드는 책들은 영어로 되어있어도 문법이나 단어가 어렵지 않아서 이해하는데에는 크게 문제가 안되었다. 그리고 단계별로 테스트를 빨간불로 만든 후 초록불로 바꾸는데까지 굉장히 자세히 설명과 예제를 제시하고 있어서 스터디를 하는데 굉장히 좋은 책이었다. 그러면서 어떻게 테스트 케이스를 작성하는지 고민하고 서로 부족한 점이 있으면 보완해주었다. 다른분들이 정말 열심히 해주어서 내가 스터디에서 다른분들에게 배우는게 더 많았다.&lt;/p&gt;

&lt;p&gt;사실 TDD가 개념을 알겠지만 실제 프로젝트에서 적용해본적이 없어서 어떻게 테스트케이스를 만들어야 하는지가 더 어려운 문제였다. 근데 책에도 자세하게 나오고 하면서 이런부분에 테스트가 들어가야 겠다는 고민도 같이하면서 테스트케이스를 만드니까 조금씩 감이 생겼다. TDD는 단순히 이론만 알고있다고 할수 있는 개발방법론이기 보단, 실제로 많이 테스트 케이스를 작성해봐야 적용할 수 있는 개발방법이라고 생각되었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 프로젝트&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;TDD를 적용하면서 간단한 앱이 만들어 졌다. 그 다음을 고민하다가 이걸로 끝내는게 아닌 릴리즈를 하는것으로 목표를 변경했다. 모두 단순히 스터디만 하고 끝내기 보단 결과물로 나오는것이 더 의미있다고 생각되어 진행하게 되었다. 그렇게 실제로 프로젝트를 진행하면서 예측가능 결과를 테스트코드로 확인하기 위해 먼저 테스트를 돌려보고 빨간불에서 초록불로 바꾸는 작업이 번거로운 것은 사실이지만 테스트를 위한 코드를 작성하게 되면 좀더 모듈화를 생각할수 밖에 없었기 때문에 코드작성에도 도움이 된다는 것을 느꼈다. 실제로 코드를 수정했을때 결과가 다르게 나와 빨간불로 나오는것을 보고 다시 초록불로 수정하게 되는것도 경험을 해보니 TDD에 신뢰도가 생겼다. 나중에 이렇게 개발하는것이 굉장히 편하다는 느낌도 받았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 릴리즈&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;릴리즈까지 틈틈히 시간을 내면서 진행하는데 스위프트의 버전이 3으로 변경됐고 데이터베이스를 몇번 변경했다. 다행히 크지 않은 프로젝트라 빠르게 적용하고 진행할 수 있었다. 우선 릴리즈를 끝냈지만 역시 그 이후가 더 중요했다. 피드백을 받아야 하고 아직 고치고 개선해야 할 것들이 많이 남아있다. 그래도 함께한 프로젝트라 의미가 있고 특히 현재 나는 호주에 와있는 상태여서 항상 행아웃으로 원격을 지원해 스터디를 함께해준 분들(찬주님, 선재님, 정훈님) 에게 너무 감사하다. 그래서 앞으로 더 기대된다.&lt;/p&gt;

</description>
        <pubDate>Mon, 21 Nov 2016 18:41:00 +0900</pubDate>
        <link>http://localhost:4000/2016-11-21-kakadu/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-11-21-kakadu/</guid>
        
        
        <category>Kakadu</category>
        
      </item>
    
      <item>
        <title>너무너무너무 고민되는 클래스이름 짓기</title>
        <description>&lt;p&gt;개발자라면 누구나 개발중 고민되는 것으로 이름짓기지 않나 싶다 특히 &lt;strong&gt;클래스이름짓기&lt;/strong&gt;
변수같은 경우도 마찬가지긴 하지만 클래스이름에 상당히 고민을 많이 한다.&lt;/p&gt;

&lt;p&gt;특히 자주쓰는 데이터베이스나 데이터를 관리하는 클래스 이름에 대해선 먼가 더 깔끔하고 좋은 이름이 없는지 
항상 고민하게 되는데 이런건 구글도 도와줄수 없는것이기 때문에 더욱더 힘들다.&lt;/p&gt;

&lt;p&gt;나의 경우 첫직장에서 일하던 클래스를 보면 클래스들의 이름을
&lt;code class=&quot;highlighter-rouge&quot;&gt;Utils&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Helper&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Manager&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Wrapper&lt;/code&gt; 로 많이 작성했다.
지금도 &lt;code class=&quot;highlighter-rouge&quot;&gt;er&lt;/code&gt; 를 붙여서 클래스를 작명하는 건 많이 쓰긴 하지만 
그때그때 조금더 명확한 명칭을 붙이고 싶어서 더 고민하게 된다.&lt;/p&gt;

&lt;p&gt;특히 &lt;code class=&quot;highlighter-rouge&quot;&gt;Manager&lt;/code&gt;라는 것을 꽤 많이 사용하게 되는데 항상 고민끝에 저 이름을 붙이게 된다. 
뭔가를 특정 부분의 데이터들을 처리하는 클래스를 &lt;em&gt;관리&lt;/em&gt;한다는 뜻으로 사용하는게 의미상 맞는지 항상
고민을 하게되는데 최근에 검색을 하면서 꽤 오래된 포스트를 찾았는데 &lt;a href=&quot;http://www.bright-green.com/blog/2003_02_25/naming_java_classes_without_a.html&quot;&gt;Naming Java classes without a ‘Manager’&lt;/a&gt;를 읽으면서 작명을 할때 의미에 대해서 다시생각하게 되었다.&lt;/p&gt;

&lt;p&gt;검색을 해보면 영어권의 사람들도 작명에 대해 상당히 고민을 많이 한다는 것을 볼수있다.&lt;/p&gt;

&lt;p&gt;작명에 대한 질문에 대한 답변들을 보면 각자의 스타일이 있어서 주로쓰는 단어가 서로 다르고 
디자인패턴에서도 이름을 인용해 쓴다.&lt;/p&gt;

&lt;p&gt;그리고 찾을 수 있는 조금의 팁은&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;전혀 새로운 단어의 사용은 자제한다.&lt;/li&gt;
  &lt;li&gt;프레임워크에서 어떤 단어들을 사용하는지 찾아본다.&lt;/li&gt;
  &lt;li&gt;디자인 패턴에서 해당 패턴의 이름을 인용한다.&lt;/li&gt;
  &lt;li&gt;작명은 굉장히 중요하긴 하지만 너무많은 시간을 작명에 쓰지는 말것.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그중에 &lt;a href=&quot;http://source-code-wordle.de/&quot;&gt;Words used in Source Code&lt;/a&gt; 라는 사이트에서
닷넷프레임외에 몇가지 프레임워크에서 사용하는 명칭들을 사용수에 따라 시각화해서 보여주고있다.&lt;/p&gt;

&lt;p&gt;결론은 결국 작명에 대한 답은 없지만 계속해서 다른 프레임워크들은 어떻게 작명하는지 계속해서 보고
클래스의 역할에 대해 꾸준히 생각해야 하는 문제인것 같다.&lt;/p&gt;

&lt;p&gt;아래는 작명에 대한 글들과 StackOverflow 질문들이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1866794/naming-classes-how-to-avoid-calling-everything-a-whatevermanager&quot;&gt;Naming Classes - How to avoid calling everything a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;WhatEver&amp;gt;Manager&lt;/code&gt;?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/1194403/what-names-do-you-find-yourself-prepending-appending-to-classes-regularly&quot;&gt;What names do you find yourself prepending/appending to classes regularly?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.c2.com/?DontNameClassesObjectManagerHandlerOrData&quot;&gt;Dont Name Classes Object Manager Handler Or Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bright-green.com/blog/2003_02_25/naming_java_classes_without_a.html&quot;&gt;Naming Java classes without a ‘Manager’&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 13 Nov 2016 21:38:00 +0900</pubDate>
        <link>http://localhost:4000/2016-11-13-naming-for-class/</link>
        <guid isPermaLink="true">http://localhost:4000/2016-11-13-naming-for-class/</guid>
        
        
        <category>개발관련</category>
        
      </item>
    
  </channel>
</rss>
